{"./":{"url":"./","title":"一期一会","keywords":"","body":" Welcome 毕业四年、工作两年、创业两年，会一直在这条路上走下去，痛也快乐。 “元稹”是花名，从原东家处离职后一直使用至今。 现在坐标闽南小城，不再漂了，因为遇到那个把我球衣当裙子穿的女生，答应娶她，感恩一路上的际遇。 计算机是爱好，全栈工程师是目标，一直在路上。 新的一年会有新方向，遇到了好的人，会好好努力。 More Details: 比一般人要高些、也壮些，球打得还行，不会坑队友。 喜欢安静的环境，小桥流水、枯藤昏鸦。 很直，拒绝装逼与哔哔哔。 民谣与摇滚很喜欢，搜集了市面上听得到与听不到的专辑（包括李志）。 最近在听窦仙儿。 平均下来，每天会读半个小时的闲书，聊以自慰。 会做饭，还凑合。 Java 与 Python 比较会，其他的语言会用，都是千篇一律的玩意儿。 后面想去学习下网络安全方面的知识。 练口语ing。 拥抱变化，热爱生活。 一期一会 她微信的昵称是“一期一会”，第一次看到时不懂，谷歌了解： 在茶道里，表演茶道的人会在心里怀着“难得一面，世当珍惜”的心情来诚心礼遇面前每一位来品茶的客人。人的一生中可能只能够和对方见面一次，因而要以最好的方式对待对方。这样的心境中也包含着日本传统文化中的无常观。 感恩萍水相逢与朝朝暮暮。 随时联系 如有疑问，请通过以下方式与我联系： 微信（请备注信息）：recently0216 邮箱：yves1012@163.com 请我喝茶 如果您觉得我整理的东西有用，请我喝杯茶吧（不要太多，因为大额要上交），2020新年伊始，祝好。 "},"resource/sms.html":{"url":"resource/sms.html","title":"国内外免费短信接码平台","keywords":"","body":"这里我给大家推荐一些好用的国内外免费短信接码平台： 1、Z-SMS：http://www.z-sms.com 2、becmd：https://www.becmd.com 3、隐私短信：https://www.yinsiduanxin.com 4、MicSMS：https://www.micsms.com 5、Receive SMS Online：http://receive-sms-online.com 6、receivesmsonline：https://www.receivesmsonline.net 7、materialtools：https://www.materialtools.com 8、Receive FREE SMS online：http://receivefreesms.com 9、receiveasms：https://receiveasms.com 10、Free Online Phone：https://www.freeonlinephone.org 11、云短信：https://zusms.com 12、FreePhoneNum：https://ch.freephonenum.com "},"tutorial/ssr.html":{"url":"tutorial/ssr.html","title":"搬瓦工与Vultr的搭建指南","keywords":"","body":"搬瓦工与Vultr的搭建指南 搬瓦工主机购买 搬瓦工的主机按照年进行收费，所以在付款时是一次性买一台主机的一年的价格，跟阿里云的模式一样。 Vultr主机购买 Vultr主机采用的是按照小时扣费，并非年付方案，类似于网吧上网。 搭建操作方法 使用Secure CRT工具连接成功后，粘贴下面的命令进行操作： [root@vultr ~]# yum install -y wget && wget --no-check-certificate -O shadowsocks-libev_CN.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev_CN.sh && bash shadowsocks-libev_CN.sh // 中文版 [root@vultr ~]# yum install -y wget && wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh // 英文版 回车后系统会自行下载脚本文件并运行，按照下图提示，我们输入1选择安装服务，回车继续： 2020-01-12 15:44:00 (51.7 MB/s) - ‘shadowsocks-libev.sh’ saved [21414/21414] ============================================== Shadowsocks Server Management Script (libev) ============================================== 1. Shadowsocks Server Install 2. Shadowsocks Server Uninstall 3. Shadowsocks Server Update ---------------------------------------------- 4. Shadowsocks Server Start 5. Shadowsocks Server Stop 6. Shadowsocks Server Restart ---------------------------------------------- 7. Shadowsocks Config Status 8. Shadowsocks Config Modify ============================================== Not installed Please Enter the Number:1 回车后系统会进入安装界面，我们首先依次输入 SS 的各项信息，然后回车继续即可： [Info] Start set shadowsocks's config information... [Info] Wherever you are not sure, just press Enter to continue. Please enter shadowsocks's password [Default is 123456]: ------------------------------- Shadowsocks's Password: 123456 ------------------------------- Please enter shadowsocks's port (1~65535) [Default is 33526]: ------------------------------- Shadowsocks's Port: 33526 ------------------------------- Please select shadowsocks's stream cipher 1) aes-256-gcm 2) aes-256-ctr 3) aes-256-cfb 4) chacha20-ietf-poly1305 5) chacha20-ietf 6) chacha20 7) rc4-md5 [Default is aes-256-gcm]:3 ------------------------------- Shadowsocks's Streamcipher: aes-256-cfb ------------------------------- Press Enter to continue...or Press Ctrl+C to cancel 安装过程耗时 2~5 分钟，完成后会来到下图界面： [Info] Congratulations, Shadowsocks has been installed successfully. ================================================= Server IP : 1.1.1.1 Server Port : 33526 Password : 123456 Encryption Method: aes-256-cfb ------------------------------------------------- ss://YWVzLTI1Ni1jZmI6TnVtYmVyMTQzMzIyM0AxNDkuMjguMTMyLjEzMzo5NTI2 ================================================= You can find the config's backup in /root/shadowsocks.txt. For more tutorials: https://www.banwagongzw.com & https://www.vultrcn.com 接下来需要安装锐速TCP加速软件，由于系统自带内核版本太高无法安装锐速，需要进行降级，复制命令进行操作： [root@vultr ~]# wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh 回车后系统会自动下载脚本并执行更换内核命令，按图提示，我们可以看到当前系统为CentOS7，等待内核更换完毕后系统会自动重启并断开连接： [INFO] System OS is CentOS7. Processing... ------------------------------------------- Retrieving https://filedown.me/Linux/Kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm Preparing... ################################# [100%] Updating / installing... 1:kernel-3.10.0-229.1.2.el7 ################################# [100%] ------------------------------------------- [INFO] Success! Your server will reboot in 3s... [INFO] Success! Your server will reboot in 2s... [INFO] Success! Your server will reboot in 1s... [INFO] Reboot... 系统重启后，软件会断开连接，等待3分钟左右服务器即可重启完毕，我们重新连接服务器，按图提示，我们继续复制命令： [root@vultr ~]# yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install 回车后系统会自动下载脚本并执行，按图提示，我们直接回车继续即可： Local Time : 2020-01-12 [16:00:09] ====================================================== | serverSpeeder | | for Linux | |----------------------------------------------------| | -- By .Vicer | ====================================================== Preparatory work... Press Enter to Continue... Preparatory work... Press Enter to Continue... Archive: /tmp/appex.zip inflating: /tmp/appex/install.sh creating: /tmp/appex/apxfiles/ creating: /tmp/appex/apxfiles/bin/ inflating: /tmp/appex/apxfiles/bin/renewLic.sh inflating: /tmp/appex/apxfiles/bin/serverSpeeder.sh inflating: /tmp/appex/apxfiles/bin/setConfig.sh inflating: /tmp/appex/apxfiles/bin/showConfig.sh inflating: /tmp/appex/apxfiles/bin/update.sh inflating: /tmp/appex/apxfiles/bin/utils.sh creating: /tmp/appex/apxfiles/etc/ inflating: /tmp/appex/apxfiles/etc/config Lic generate success! Installation done! 回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息，按图提示，我们每次都直接回车继续即可： ---- You are about to be asked to enter information that will be used by ServerSpeeder, there are several fields and you can leave them blank, for all fields there will be a default value. ---- Accelerate VPN (PPTP,L2TP,etc.)? [n]: Auto load ServerSpeeder on linux start-up? [y]: /etc/centos-release:CentOS Linux release 7.7.1908 (Core) /etc/os-release:NAME=\"CentOS Linux\" /etc/os-release:PRETTY_NAME=\"CentOS Linux 7 (Core)\" /etc/os-release:CENTOS_MANTISBT_PROJECT=\"CentOS-7\" /etc/redhat-release:CentOS Linux release 7.7.1908 (Core) /etc/system-release:CentOS Linux release 7.7.1908 (Core) Run ServerSpeeder now? [y]: 设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态，按图提示，当出现红框内信息时说明锐速已完成安装并开机自启动： (license 628A71EDC5706E97151885d3) [Running Status] ServerSpeeder is running! version 3.11.20.10 [License Information] License 628A71EDC5706E97 (valid on current device) MaxSession unlimited MaxTcpAccSession unlimited MaxBandwidth(kbps) 1024000 ExpireDate 2035-12-31 在使用的过程中如果需要修改相关的配置信息，请使用下面的命令： 附一、修改Shadowsocks的配置信息 如果你以后需要修改Shadowsocks的配置（比如密码、端口或者加密），可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 8 项：修改Shadowsocks配置即可重新设置Shadowsocks的密码、端口以及加密方式。 附二、卸载Shadowsocks服务 如果你以后需要卸载Shadowsocks服务，可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 2 项：卸载Shadowsocks服务即可从服务器中卸载掉Shadowsocks服务。 客户端连接工具 相关资源直接在互联网下载即可。安卓手机使用SSRR客户端、苹果手机使用superwingy、Mac电脑使用ShadowsocksX-NG、Windows电脑使用Shadowsocks。 验证是否成功，可以直接访问谷歌看是否能够正常访问，或者访问（whoer.net）查看网络信息。 "},"tutorial/django.html":{"url":"tutorial/django.html","title":"创建第一个Django应用","keywords":"","body":"创建第一个Django应用 创建项目 创建项目目录并安装虚拟环境： yvesdeMacBook-Air:Python yves$ mkdir Propaganda // 创建项目目录 yvesdeMacBook-Air:Python yves$ cd Propaganda yvesdeMacBook-Air:Python yves$ pipenv install // 安装虚拟环境 Warning: the environment variable LANG is not set! We recommend setting this in ~/.profile (or equivalent) for proper expected behavior. Creating a virtualenv for this project… Pipfile: /Users/yves/Documents/GitHub/Python/Propaganda/Pipfile Using /usr/local/bin/python3 (3.6.4) to create virtualenv… ⠧ Creating virtual environment...Already using interpreter /usr/local/bin/python3 Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6' New python executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python3 Also creating executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python Installing setuptools, pip, wheel... done. ✔ Successfully created virtual environment! Virtualenv location: /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM Creating a Pipfile for this project… Pipfile.lock not found, creating… Locking [dev-packages] dependencies… Locking [packages] dependencies… Updated Pipfile.lock (ca72e7)! Installing dependencies from Pipfile.lock (ca72e7)… &#x1F40D; ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. 启动开发环境并安装Django： yvesdeMacBook-Air:Propaganda yves$ pipenv shell // 启动虚拟环境 Launching subshell in virtual environment… bash-3.2$ . /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/activate (Propaganda) bash-3.2$ pipenv install Django // 安装Django Installing Django… Adding Django to Pipfile's [packages]… ✔ Installation Succeeded Pipfile.lock (12ffd6) out of date, updating to (ca72e7)… Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (12ffd6)! Installing dependencies from Pipfile.lock (12ffd6)… &#x1F40D; ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 4/4 — 00:00:04 Django常见命令有创建项目、创建应用、创建超级用户、数据表创建及更新、启动服务器等，这些命令都包含在 django-admin.py 和 manage.py 里。除此以外 manage.py 还包含其它有用的命令，基本包含： 创建新项目：django-admin startproject project_name 创建新应用：python manage.py startapp app_name 检测模型变化生成新的数据库迁移文件：python manage.py makemigrations [app_name] 同步数据库与模型：python manage.py migrate 启动服务器：python manage.py runserver 创建超级用户：python manage.py createsuperuser 修改用户密码：python manage.py changepassword username 打开交互终端：python manage.py shell（dbshell指数据库交互） 查看当前版本：python manage.py version 清空数据库内容只留下空表：python manage.py flush 搜集静态文件：python manage.py collectstatic 创建Django项目并启动验证是否成功： (Propaganda) bash-3.2$ django-admin startproject Propaganda // 创建项目 (Propaganda) bash-3.2$ ll // 项目文件结构 drwxr-xr-x 7 yves staff 224 Dec 6 21:06 ./ drwxr-xr-x 12 yves staff 384 Dec 6 20:34 ../ -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 7 yves staff 224 Dec 6 20:56 Propaganda/ -rwxr-xr-x 1 yves staff 630 Dec 6 20:56 manage.py* (Propaganda) bash-3.2$ python manage.py runserver // 启动项目 Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. December 06, 2019 - 13:14:35 Django version 3.0, using settings 'Propaganda.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. 在浏览器输入 http://127.0.0.1:8000/ 看到Django启动页即表示项目创建成功。 创建应用与细节优化 应用创建 项目创建成功并验证通过后就可以创建相关应用： (Propaganda) bash-3.2$ python manage.py startapp chatriq 创建成功后需要在 settings.py 文件中加入相应配置： INSTALLED_APPS = [ 'chatriq' ] 项目细节优化 在项目根目录下创建 apps 包目录，用于统一管理后期创建的应用，这需要在 settings.py 文件里新增一条配置： sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) # 将apps目录加到python的搜索目录中去 修改 settings.py 文件里的配置： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = False 在根目录下创建 static 目录用于存放静态文件，创建 templates 文件夹用于存放模板文件，并在 settings.py 文件中添加配置： STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), ) 最终，目录结构如下： (Propaganda) bash-3.2$ ll -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 8 yves staff 256 Dec 6 21:43 Propaganda/ drwxr-xr-x 4 yves staff 128 Dec 6 21:41 apps/ -rw-r--r-- 1 yves staff 0 Dec 6 21:14 db.sqlite3 -rwxr-xr-x@ 1 yves staff 630 Dec 6 20:56 manage.py drwxr-xr-x 2 yves staff 64 Dec 6 21:26 static/ drwxr-xr-x 2 yves staff 64 Dec 6 21:26 templates/ 数据库配置 在 settings.py 文件中可以配置项目连接的数据库信息，由于本项目暂时不涉及数据库相关操作。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } 生成表迁移数据并在数据库中创建对应表文件： (Propaganda) bash-3.2$ python manage.py makemigrations No changes detected (Propaganda) bash-3.2$ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying sessions.0001_initial... OK 至此，Django项目应用创建完毕，后续更新编码过程中的细节与注意事项。 "},"tutorial/django-deploy.html":{"url":"tutorial/django-deploy.html","title":"Django应用部署与监控","keywords":"","body":"Django应用部署与监控 1、部署准备 一台云服务器，初级版（1核1G）即可，安装CentOS7.2版本操作系统，建议最好使用阿里云；一个已经完成ICP备案的域名。 2、环境搭建 2.1、新增用户 操作CentOS服务器，最好不要使用root根用户，其一是防止误操作；其二是避免在部署的过程中出现权限相关问题。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ adduser yves # 添加yves用户 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ passwd yves # 设置yves的操作密码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ usermod -aG wheel yves # 将yves添加到超级权限组 2.2、Python环境 安装Python环境之前，需要在操作系统上安装必要软件并更新yum源。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum update # 更新yum源 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum upgrade [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc # 安装必要软件 这个步骤需要一定时间，耐心等待完成之后再进行下一步的安装Python-3.6.4。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir src # 家目录下新建src目录存放下载文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd src # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz # 下载Python-3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ tar -zxvf Python-3.6.4.tgz # 解压 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd Python-3.6.4 # 进入解压目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ ./configure LD_RUN_PATH=/usr/local/lib LDFLAGS=\"-L/usr/local/lib\" CPPFLAGS=\"-I/usr/local/include\" [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ make LD_RUN_PATH=/usr/local/lib # 编译 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo make install # 安装 上述下载、编译、安装等操作完成后，需要验证是否安装成功，出现下列版本信息即表示安装成功。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ python3 -V Python 3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip3 -V pip 19.3.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6) 安装最好用的python虚拟环境和包管理工具pipenv。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo pip3 install pipenv 问题：sudo: pip3: command not found 在环境变量中添加 alias sudo='sudo env PATH=$PATH' 并使其生效即可。 2.3、MySQL数据库安装 CentOS默认安装mariadb数据库，首先你需要卸载. [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ yum remove mariadb-libs.x86_64 安装MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/src/ # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm # 下载安装依赖文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install mysql-community-server # 安装MyS数据库 MySQL数据库的相关操作。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld start # 启动 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld stop # 停止 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld restart # 重启 查看MySQL数据库的初始密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cat /var/log/mysqld.log | grep password 登录MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mysql -uroot -p 修改MySQL数据库密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ SET PASSWORD = PASSWORD('123456'); 开启远程连接 mysql> show databases; mysql> use mysql; mysql> show tables; mysql> select Host, User from user \\G; mysql> update user set host = '%' where user = 'root'; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql> flush privileges; Query OK, 0 rows affected (0.00 sec) 开启genelog mysql> set global general_log_file=\"/tmp/general.log\"; mysql> set global general_log=on; 创建用户 mysql> create user 'imooc'@'%' identified by '123456'; 赋于用户权限 mysql> grant all privileges on *.* to 'imooc'@'%' identified by '123456' with mysql> grant option; # 所有权限 mysql> grant select on *.* to 'imooc'@'%' identified by '123456' with grant option; # 查询权限 mysql> revoke all privileges on *.* from imooc; # 收回权限 mysql> flush privileges; 忘记密码 [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 添加skip-grant-tables mysql> show databases; mysql> user mysql; mysql> update user set authentication_string = password(\"123456\") where user = 'root'; [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 去除skip-grant-tables [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo service mysqld restart 3、部署代码 将项目代码上传到部署目录下，方法比较多，推荐使用Git进行代码版本的管理，首先需要在服务器上安装相关应用并从远程仓库拉取代码，拉取完成后修改成生产环境的配置。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install git # 安装git应用 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir ~/apps/ # 创建项目部署目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/apps/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ git clone '远程仓库地址' # 拉取代码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd '项目目录' [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install --deploy --ignore-pipfile # 安装所需依赖 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py migrate # 创建数据库 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py runserver 0.0.0.0:8000 # 启动服务 服务启动后，即可以通过公网IP:8000端口访问应用，注意：务必在阿里云管理控制台放开8000端口，否则无法访问。 4、Gunicorn安装与使用 直接使用runserver命令启动的开发服务器并不适用与生产环境，因此使用Gunicorn作为生产环境服务器。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install gunicorn # 安装gunicorn [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 0.0.0.0:8000 # 项目目录下启动 启动服务后，即可以通过公网IP:8000端口访问应用，但此时css样式全部未加载导致页面乱的一塌糊涂，这并非bug，而是由于处理静态文件请求并不是Gunicorn擅长的事情，应该交由更专业的Nginx去做。 5、Nginx服务器安装与使用 Nginx是一个高性能的HTTP和反向代理web服务器，它的功能非常多，这里主要用它来处理静态文件以及将非静态文件的请求反向代理给Gunicorn。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install epel-release -y [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install nginx -y # 安装Nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl start nginx # 启动nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl stop nginx # 停止nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl restart nginx # 重启nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ 直接在浏览器输入公网IP，看到nginx欢迎页面即表示安装并启动成功。下面就是修改应用中的settings.py配置文件，推荐Djecrety生成一个一个线上环境的SECRET_KEY。 DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '公网IP或域名'] SECRET_KEY = ’***‘ STATICFILES_DIRS # 注释 STATIC_ROOT = os.path.join(BASE_DIR, 'static') # 新增 将项目的静态资源统一收集到static目录下。 pipenv run python manage.py collectstatic Nginx的配置位于/etc/nginx/nginx.conf文件中，其中项目的配置文件可以在/etc/nginx/conf.d/目录下新增，但是必须以.conf后缀结尾。 server { charset utf-8; listen 80; server_name 公网IP或域名; location /static { alias 绝对路径; } location /media { alias 绝对路径; } location / { proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; } } 配置文件新增完成之后，重启Nginx即可访问应用，至此基本完成Nginx与Gunicorn部署Django应用的目标。 6、Supervisor安装与使用 由于服务器与网络存在不稳定的情况，因此直接在控制台启动应用的方式存在宕机的风险，并且没办法对相关进程进行监控，因此使用Supervisor来管理Gunicorn进程，这样当服务器重新启动或者Gunicorn进程意外崩溃后，Supervisor会帮我们自动重启Gunicorn。 由于Supervisor目前还不支持Python3，因此需要使用CentOS系统自带的python2版本进行安装。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip install supervisor 在家目录下新建相关的文件夹。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/conf.d # 创建配置文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/var/log # 创建日志文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/etc/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ echo_supervisord_conf > supervisord.conf # 生成supervisor配置文件 修改supervisor.conf，让Supervisor进程产生的一些文件生成到上面我们创建的目录下，而不是其默认指定的地方。 [unix_http_server] file=/home/yves/etc/supervisor/var/supervisor.sock logfile=/home/yves/etc/supervisor/var/log/supervisord.log pidfile=/home/yves/etc/supervisor/var/supervisord.pid user=yves [supervisorctl] serverurl=unix:///home/yves/etc/supervisor/var/supervisor.sock files=/home/yves/etc/supervisor/conf.d/*.ini 配置修改完成之后需要在conf.d文件夹下新增应用的配置文件，注意文件必须以.ini结尾。 [program:projectname] command=pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 127.0.0.1:8000 directory=/home/yves/apps/projectname autostart=true autorestart=unexpected user=yves stdout_logfile=/home/yves/etc/supervisor/var/log/projectname-stdout.log stderr_logfile=/home/yves/etc/supervisor/var/log/projectname-stderr.log 启动supervisor。 supervisord -c ~/etc/supervisord.conf # -c 表示根据配置文件启动 进入supervisor管理控制台。 supervisorctl -c ~/etc/supervisord.conf 7、问题与解决 7.1、后台管理系统图片上传报500错误 这是由于Nginx的权限问题导致的，网上大多数资料说将'Chmod 777 /media'执行就好，但是我试了不行，后来将/etc/nginx/nginx.conf中的user改成root就好了。 "},"tutorial/pipenv.html":{"url":"tutorial/pipenv.html","title":"超好用的 Python 包管理工具","keywords":"","body":"Pipenv – 超好用的 Python 包管理工具 pipenv 是什么 pipenv 是 python 官方推荐的包管理工具，集成了 virtualenv、pyenv 和 pip 三者的功能于一身，类似于 php 中的 composer。 我们知道，为了方便管理 python 的虚拟环境和库，通常使用较多的是 virtualenv 、pyenv 和 pip，但是他们不够好用或者说不够偷懒。于是 requests 的作者 Kenneth Reitz 开发了用于创建和管理 python 虚拟环境的工具 —- pipenv。 它能够自动为项目创建和管理虚拟环境，从 Pipfile 文件中添加或者删除包，同时生成 Pipfile.lock 文件来锁定安装包的版本和依赖信息，避免构建错误。 pipenv 主要解决了以下问题： 不用再单独使用 virtualenv、pyenv 和 pip 了，现在它们结合到了一起。 不用再维护 requirement.txt 了，使用 Pipfile 和 Pipfile.lock 来代替。 可以在开发环境使用多个 python 版本。 在安装的 pyenv 条件下，可以自动安装需要的 python 版本。 安全，广泛地使用 Hash 校验，能够自动曝露安全漏洞。 随时查看图形化的依赖关系。 安装 pipenv 使用 pip 安装 $ pip install --user pipenv 这个命令在用户级别（非系统全局）下安装 pipenv。如果安装后 shell 提示找不到 pipenv 命令，你需要添加当前 Python 用户主目录的 bin 目录到 PATH 环境变量。 使用 brew 安装 Mac 下使用 brew 安装软件应该是最方便的了，推荐使用： brew install pipenv 升级 pipenv： brew upgrade pipenv 常用命令 pipenv 具有的选项： Options: --where Output project home information. --venv Output virtualenv information. --py Output Python interpreter information. --envs Output Environment Variable options. --rm Remove the virtualenv. --bare Minimal output. --completion Output completion (to be eval'd). --man Display manpage. --support Output diagnostic information for use in GitHub issues. --site-packages Enable site-packages for the virtualenv. [env var: PIPENV_SITE_PACKAGES] --python TEXT Specify which version of Python virtualenv should use. --three / --two Use Python 3/2 when creating virtualenv. --clear Clears caches (pipenv, pip, and pip-tools). [env var: PIPENV_CLEAR] -v, --verbose Verbose mode. --pypi-mirror TEXT Specify a PyPI mirror. --version Show the version and exit. -h, --help Show this message and exit. pipenv 可使用的命令参数： Commands: check Checks for security vulnerabilities and against PEP 508 markers provided in Pipfile. clean Uninstalls all packages not specified in Pipfile.lock. graph Displays currently-installed dependency graph information. install Installs provided packages and adds them to Pipfile, or (if no packages are given), installs all packages from Pipfile. lock Generates Pipfile.lock. open View a given module in your editor. run Spawns a command installed into the virtualenv. shell Spawns a shell within the virtualenv. sync Installs all packages specified in Pipfile.lock. uninstall Un-installs a provided package and removes it from Pipfile. update Runs lock, then sync. 一些例子： Usage Examples: Create a new project using Python 3.7, specifically: $ pipenv --python 3.7 Remove project virtualenv (inferred from current directory): $ pipenv --rm Install all dependencies for a project (including dev): $ pipenv install --dev Create a lockfile containing pre-releases: $ pipenv lock --pre Show a graph of your installed dependencies: $ pipenv graph Check your installed dependencies for security vulnerabilities: $ pipenv check Install a local setup.py into your virtual environment/Pipfile: $ pipenv install -e . Use a lower-level pip command: $ pipenv run pip freeze pipenv 使用过程 创建环境，安装指定 python 的版本信息： yvesdeMacBook-Air:Python yves$ mkdir GeneralCrawler yvesdeMacBook-Air:Python yves$ cd GeneralCrawler yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install 如果指定了 --two 或者 --three 选项参数，则会使用 python2 或者 python3 的版本安装，否则将使用默认的 python 版本来安装。当然也可以指定准确的版本信息： yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --two yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --three yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --python 3.6.4 pipenv 会自动扫描系统寻找合适的版本信息，如果找不到的话，同时又安装了 pyenv 的话，则会自动调用 pyenv 下载对应版本的 python， 否则会报错。 这时候在当前 GeneralCrawler 环境下生成 Pipfile 和 Pipfile.lock 两个环境初始化文件。 进入|退出环境： 进入环境： yvesdeMacBook-Air:GeneralCrawler yves$ pipenv shell 退出环境： (GeneralCrawler) bash-3.2$ exit 安装第三方包： 在安装第三方包之前，我们可以修改镜像源(建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple )来加快下载速度： (GeneralCrawler) bash-3.2$ vim Pipfile url = \"https://pypi.tuna.tsinghua.edu.cn/simple\" 此时我们测试安装 requests 包： (GeneralCrawler) bash-3.2$ pipenv install requests 此时，Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。 Pipfile 是用来替代原来的 requirements.txt 的，内容类似下面这样。source 部分用来设置仓库地址，packages 部分用来指定项目依赖的包，dev-packages 部分用来指定开发环境需要的包，这样分开便于管理。 [[source]] name = \"pypi\" url = \"https://pypi.tuna.tsinghua.edu.cn/simple\" verify_ssl = true [dev-packages] [packages] requests = \"*\" [requires] python_version = \"3.6\" Pipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。 { \"_meta\": { \"hash\": { \"sha256\": \"223fe2288079b4bdf4932ad9f98e6e26b68e9468f2b83dff8dfa78a36cef768b\" }, \"pipfile-spec\": 6, \"requires\": { \"python_version\": \"3.6\" }, \"sources\": [ { \"name\": \"pypi\", \"url\": \"https://pypi.tuna.tsinghua.edu.cn/simple\", \"verify_ssl\": true } ] }, \"default\": { \"certifi\": { \"hashes\": [ \"sha256:017c25db2a153ce562900032d5bc68e9f191e44e9a0f762f373977de9df1fbb3\", \"sha256:25b64c7da4cd7479594d035c08c2d809eb4aab3a26e5a990ea98cc450c320f1f\" ], \"version\": \"==2019.11.28\" }, \"chardet\": { \"hashes\": [ \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\", \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\" ], \"version\": \"==3.0.4\" }, \"idna\": { \"hashes\": [ \"sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407\", \"sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c\" ], \"version\": \"==2.8\" }, \"requests\": { \"hashes\": [ \"sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4\", \"sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31\" ], \"index\": \"pypi\", \"version\": \"==2.22.0\" }, \"urllib3\": { \"hashes\": [ \"sha256:a8a318824cc77d1fd4b2bec2ded92646630d7fe8619497b142c84a9e6f5a7293\", \"sha256:f3c5fd51747d450d4dcf6f923c81f78f811aab8205fda64b0aba34a4e48b0745\" ], \"version\": \"==1.25.7\" } }, \"develop\": {} } 现在安装另一个包，再次查看这两个文件的内容。你会发现 Pipfile 现在包含两个安装包了，Pipfile.lock 也包含了所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。每次你安装新的依赖包，这两个文件都会自动更新。 安装指定版本包： (GeneralCrawler) bash-3.2$ pipenv install requests==2.22.0 安装开发环境下的包： 加 --dev 表示包括 Pipfile 的 dev-packages 中的依赖。 (GeneralCrawler) bash-3.2$ pipenv install requests==2.22.0 --dev 卸载第三方包： (GeneralCrawler) bash-3.2$ pipenv uninstall requests 更新安装包： (GeneralCrawler) bash-3.2$ pipenv update requests (GeneralCrawler) bash-3.2$ pipenv update // 更新所有包，会删除所有软件包然后重新安装最新的版本 查看虚拟环境目录： (GeneralCrawler) bash-3.2$ pipenv --venv /Users/yves/.local/share/virtualenvs/GeneralCrawler-flvgS1J0 查看项目根目录： (GeneralCrawler) bash-3.2$ pipenv --where /Users/yves/Documents/GitHub/Python/GeneralCrawler 检查软件包的完整性 pipenv 可以帮你检查已安装的软件包有没有安全漏洞，运行下面的命令： (GeneralCrawler) bash-3.2$ pipenv check Checking PEP 508 requirements… Passed! Checking installed package safety… All good! 查看依赖树 (GeneralCrawler) bash-3.2$ pipenv graph requests==2.22.0 - certifi [required: >=2017.4.17, installed: 2019.11.28] - chardet [required: >=3.0.2,=2.5,=1.21.1,锁定版本 (GeneralCrawler) bash-3.2$ pipenv lock // 更新 lock 文件锁定当前环境的依赖版本 Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (ef768b)! 环境变量管理 如果你开发调试时需要配一堆环境变量，可以写到 .env 文件中，在 pipenv shell 进入虚拟环境时，它会帮你把这些环境变量加载好，非常方便。 例如写一个 .env 文件： echo \"FOO=hello foo\" > .env 之后 pipenv shell 进入虚拟环境，echo $FOO 就能看环境变量的值 hello foo 已经设置好了。 "}}