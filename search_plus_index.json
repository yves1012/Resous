{"./":{"url":"./","title":"关于我们","keywords":"","body":" Welcome 平时收集了各种各样的资源，杂且乱，需要用时得一个个找，有些即使收藏也忘了，于是就有了写个网站把相关资源分门别类整理出来的想法。 网站里的资源，都是平时积累然后按照规则整理出来的，如果有需要，可以联系我获取。 希望通过本站，能把优秀的资源共享出来。同时申明，本站所有资源旨在学习，不做商用，也禁止利用网站里的任何信息做任何违法行为，否则后果自负。 一期一会 一期一会是一个源于日本茶道的成语，意思是在茶会时领悟到这次相会无法重来，是一辈子只有一次的相会，故宾主须各尽其诚意。 在茶道以外，这个意义可推而广之，指一生一次的机会，当下的时光不会再来，须珍重之。也常在日本武道中出现，警惕学武道的人不要因以为有“再试一次”的机会而掉以轻心或疏于练习，若是面临生死关头就没机会“再试一次”了。此外，虽然武道的技巧（如柔道的招式）可以多次重复使出，但每次比试、较量都是独特的。 联系 请通过微信与我联系，添加方式如下： 微信号(请备注来源)：micisty8669 微信二维码： "},"book_2.html":{"url":"book_2.html","title":"经济学思维","keywords":"","body":"经济学思维 这是一本经济学非常实用的书，叫做经济学思维，是罗振宇特别推崇的一个作者李子扬先生写的。基本也是文章拼凑的一本书，作者说了边写作边思考。本书分为三个大部分，第一部分是经济学强拆三观，成本和收益是生活中永远存在的，第二章生活中的经济学，第三章才具体讲一些经济学的原理。 第一章内容，经济学强拆三观，有些人觉得经济学很神秘，很高深，其实也不然，经济学主要就是分析成本收益的学问，是一门关于选择的学问。作者上来就强调，改革是一个不可逆的进程，任何过度悲观和过度乐观都是不正确的。改革带来了知识进步，而知识进步带来了财富。所以这才是改革开放的最大意义所在，改革开放之初中国8成都是农民，只有农业知识，而对于现代的公司制度完全都不了解，什么叫股份，什么叫管理什么又叫金融，完全是一脸懵逼什么都不懂。有几个明白人，也都受到排挤。而几十年改革走过来，公司的概念已经深入人心，而中国制造更是名闻世界。作者提出一个有意思的问题，什么无知最可怕？知道自己无知不可怕，不知道自己无知才是最可怕的，知道自己不会PS，你可以找地方去学，或者找会的人来干。而如果不知道自己哪些知道哪些不知道，上来就反对，那就是一种无知的反对。比如在改革开放之初，全国上下就是这种无知状态，不知道我们差什么，只是一味反对开放，反对改革。所以这种争论都是毫无意义的。 作者还引用了朱锡庆的一个观点，知识是活动的副产品，大量知识都是无法用文字形式传递的。换句话说，很多东西是干出来的，不是学出来的。如果你只是学，从不实践，基本上也是没什么卵用。比如在计划经济里学市场经济，怎么学怎么蒙圈。中国改革之所以成功，俄罗斯改革失败，主要区别就是中国开门改革，俄罗斯一直在闭门改革。而在改革这方面，中国有个独特的优势，就是港澳台地区，一直给我们自己输出着易于接受的经验和知识。 作者还举例温州，说温州改革之前是个穷地方，但当时穷地很多不光温州，但为啥温州最后发展起来了，别的地方却没发展起来，主要源于温州这个地方没法种地，国企也少，养不起自己，于是很久就有了经商的传统，小商小贩遍地。所以经商的知识很多，温州人走南闯北积累了很多知识，容易接受更加先进的东西。而反观东北，一直说黑土养人，国企遍布，所以对于外来的知识反而排斥，所以到现在反而落后了。我觉得这个说法很有道理，就好比老鼠掉到米缸里，等吃完了大米，就只能等着挨饿了。逆水行舟不进则退，安逸太久了，反而发现自己落伍了。中国开放始于第二次鸦片战争，那会就开始了洋务运动，但总觉得中学为体西学为用，所以一直不接受西方的东西，最后也就学得四不像，而日本反而学什么都学得彻底，敢于清空自己，无论当年学工业学制度，以及最近学足球，日本的学习能力让人吃惊，基本上1-2代人就完全学出了一个天翻地覆。而这种知识结构一旦扎根，便坚如磐石的变成发展的动力。这也是为什么德国2次世界大战，都被炸成废墟了，却依然10几年就能缓过来。 那么说了这么多，中国未来怎么走呢？作者调皮了，说改良改良越改越凉，什么意思呢，就是说有些事并不以你的意识为转移的，世界上有三种事情，一类是非人类行为，比如地震，另一类是人类行为后果，比如房子不合格，塌了。第三种就是人类行为的意外后果，比如地震后物价上涨。所以你觉得越改革越好，结果却往往越改毛病越多。宏观调控那只看不见的手，管的越多的地方，反而越是乱套。我给大家举个例子，比如最近压产能，结果把商品压出一个价格暴涨。这都是宏观调控的意外后果，还比如拿房子拉动经济，结果发现房子卖了10万亿，贷款债务增加7万亿，结果GDP才增加5万亿。最后拉动经济的根本不是房子，而是债务。所以作者的观点就是，市场才是配置资源最有效的因素。作者说，经济学家们天天忽悠减税，但最后让马云做到了。通过电子商务很多淘宝卖家实际上免税了。这就是市场调节的力量，所以这就提出一个新的东西，老百姓没什么远见也没什么抱负，只想赚钱，这就是经济学人的假设，自私自利，每个人都想赚钱的时候，这就是巨大洪流，推动社会的发展。所以，推动经济发展和社会变革的，都是一个个经济人，也就是每个想赚钱的老百姓，想把生活变得更好的老百姓本身。不是亿万富豪也不是政治家的远见卓识。从这点看只要相信市场，给市场活力，有时候就足够了，繁荣往往是静悄悄的到来，而灾难则一定是大吵大闹的降临。所以最后作者给了一个结论，用了经济学家科斯的说法，中国的这一经济转型，就是哈耶克的那种，人类行为的意外后果理论的一个极佳案例。那意思就是说，中国走到今天的繁荣，纯粹是一种意外，并不是当年精心设计出来的结果。或者说当时设计者的认知，根本不可能设计出今天的繁荣局面。 在中国有一种人充满了个人主义色彩，总是反对集体，总是排斥社会，动不动就关我屁事，关你屁事。但作者说了，如果不让他们和别人发生任何联系，仅仅保证他们衣食无忧，可能吗？他们估计就疯了。没错现在已经不可能有人脱离社会而存在了，他举例对比，北方一个小区电梯坏了，居民就给政府写信，要求解决，而很长时间解决不了，就一直写信。宁可电梯坏着威胁着人们生活，也什么都不做，只是等政府来解决，而温州一小区，广场舞扰民，结果居民自己商量，买了一个设备，干扰广场舞的声源，广场舞的问题很快就解决了。所以这就是心态的不同，你觉得政府是主人，你就只能等他来解决问题，而如果自己替政府解决问题，那就吃亏了。而如果觉得自己才是生活的主人，就应该自己学着去解决问题，目的就是先让自己的生活变好再说。老百姓的话叫做，谁难受谁知道。公共责任就是大家的责任，而政府只是帮大家打理着一切，每个成员都不应该放弃自己的公共责任。 作者用一节内容来介绍干掉计划经济的三种武器，第一个就是价格和知识。上来就毫不客气的举了俄罗斯的例子，一个计划经济，由于没有价格，经济计算是不可能的，所以只能导致社会灾难。计划经济否定的是私有制，如果公有制或者国家所有，那么讨价还价也就变得多余，没有了价格所有的经济指标也就全部失灵，全凭计划经济设计者的安排来调动分配物资，由于不可能洞悉，每个企业的真实需求，和老百姓的真实需要，所以经济运转效率极低。作者举例，可以用铁铝铜陶瓷来制造盘子，但到底用什么做最好呢？不知道，所以只能蒙着来。其实这个问题放在市场经济中就很好解决，你看老百姓买哪个，就造哪个嘛！哪个利润高，销售好，就多生产，没人买的自然也就不造了。这就是市场指挥生产，也是经济学家米瑟斯提出的打掉计划经济的第一种武器，价格。那么第二种武器知识是谁提出的呢？就是著名的哈耶克，他说只有市场体系才能有效的利用存在于不同人的头脑里的分散的知识。计划经济在这方面只会一败涂地。 那么知识是什么，不光是数理化，比如你去菜市场买菜，小贩就比你有知识，他更懂的菜和肉。但你也不差，比他更知道你到底想要什么，打算花多少钱，能够接受多少钱。所以这两种知识碰撞，就有了价格。小贩赚大钱了，他就多种某种菜，而他如果赔钱了，他可能就不种了。比如猪肉就是这样周期波动，猪肉价格高，养猪的多，很快猪肉价格就下来了，都赔钱，养殖户就杀猪吃肉。过一段猪肉供给少了，自然价格就又上来了。但计划经济是无法这么波动的。 有人问了，计划经济这么糟糕，但苏联也70年，而且军事实力航天实力有目共睹，怎么解释？这就要拿出第三种武器，那就是他自己本身的变修。计划经济只能是多中心的，局部的，或者说是暂时的，二恶不可能是绝对中央化的。中国60年代所批评的苏联变修，正好解释了这个问题，要不是变修苏联恐怕都维持不了70年。而经济学家波兰尼就区分了两种秩序一种是设计出来的，第二种是自发的。前者只能是数目小，比如家庭内部公司内部等等，而后者才是国家经济应该存在的方式。他举了个例子，比如飞机场，飞机的起降就是计划经济的结果，但比飞机多出上万倍的汽车的行驶，就永远不可能像飞机一样通过计划来指挥。所以苏俄战时共产主义，是有进步意义，也解决了问题，但终究不是一个常态。迟早有进行不下去的一天。 作者还举了大清农民的例子，他们会隐瞒产量少交公粮，并不是对制度反抗而是为了生存达成了某种共识。催缴的人也不敢过于严格，因为他们知道把农民逼死了，他们的任务也完成不了，更何况收上来的东西也不是自己的。所以这其实已经是市场化的对立。而现在的一些国企依然出现这种反行为，对于国企的业绩和成本没人关心。现在很多著名的企业，比如海尔、格力，改制之前都是业绩一塌糊涂。所以不管你想不想，在计划经济中不断的有市场经济元素在跟计划相对抗，但这些市场元素，也经常遭到各种各样的迫害和中断。 计划经济是徒劳的，只能是分散的多中心的，小规模的。而市场经济才能够常态化，今天我们主要说说，经济中人的因素。挺有意思，西方经济学把人都看成了自私自利的，而东方智慧则说人之初性本善，到底人性是恶是善呢？今天我们就来解决这个问题。作者说人都是容易激动犯错的，不容易改正错误的。也不愿意听别人的批评，甚至在自己的内心都时常处于蒙圈状态，比如他举例，损失厌恶，也就是老板奖你1万元和罚你1万元，在你心里产生的变化完全不对等。罚你一万，你可能会出离愤怒。那么假设老板先奖你一万，再把这1万罚走呢？你依然会愤怒，因为你会把意外之喜当成外快，甚至不计入收入，但被罚掉的钱，则切实变成了支出。另外人都是片面的，很少全面思考，比如关注空难而并不关注每天有多少交通事故。第三，人对于形象的东西更感兴趣，喜欢感性思考而不喜欢理性。第四，人都是说一套做一套。你调查的时候他都说喜欢读书，人应该多读书，但现在看书的人已经越来越少。作者甚至自嘲，明知道价格是调整市场的有效手段，但遇到商家涨价，第一反应也是不开森。但人们之间最后之所以形成了各种各样的区别，是因为大部分人任由这种第一感觉发展，而少部分人则能够通过自己的认知给予克制。所以得出一个结论，市场中的人，都是非理性的。都是易犯错误的，都是趋利避害的，都是自私自利的。而感性思维是常态，理性思维则不经常动用。经常犯错但却并不反思。跟郭德纲说的是的，看我哪不对您就多批评，反正我也不改。 那既然人都是非理性的，为什么市场经济又会是有效的呢？因为有一个因素，推动了他们要学会理性思考，这个因素就是钱，真金白银对人们的行为进行了约束。比如现在，大家去看电视剧更嗨皮，但还是会有负罪感，觉得应该多学点东西。而学习的目的，说白了就是升值加薪，或者投资赚钱嘛！其实无非这么点事。而这样的特点也就决定了，商人的思考，或者公司的思考，要比普通人思考全面而理性的多。所以即使你不想经商，也要学会经济学的思维，学会像商人那样去思考问题。才能跟街头大妈拉开差距。 下面来聊聊，企业家和政府，到底该是个什么关系。第一种是柳传志所说的在商言商，也就是企业家为政府承担责任，雇佣更多的员工纳更多的税，然后听话就好。还有一种说法，企业家应该跟政府斗争，抗争管制和干预，为企业赢得更大发展空间。而作者提出了第三条路，他举例美国科氏集团的查尔斯科克的说法，我们先绝对服从，从而努力沟通，力争改变。这在国内其实也是很好理解，很多大公司都有重要的一个部门，直接跟CEO汇报的，叫做政府关系部，主要就是跟政府打交道，你看他天天吃吃喝喝，哥长哥短，但到关键时候，他能为公司争取不少利益。甚至有的公司的政府关系员工，本身就来自政府要员。科克的这套打法就是不把对方妖魔化，也不把问题简单化，在合作的背景下寻求改变。作者称之为，合作性改变。 作者特地用两节来聊贸易，并抛出了一个段子，说的是春秋时期，齐国命令大臣必须穿丝，但国内只种粮食，不养桑树，结果需求量上升，供给没有，而价格上涨，邻国纷纷改种桑树赚齐国的钱，几年后，齐国只准穿布艺，且禁止粮食出口，一下临近的鲁国梁国就都爆发了饥荒，这个故事充满了阴谋论的色彩，让很多人都对中国的世界贸易之路担心。还整出一个什么18亿亩红线，好像天天有人要害我么一样。作者说这个段子改写自《管子》，这不是史书而是一本论文集，换句话说是我相信，我主张。所以以上这个段子，基本都是假设然后出现的结果。而齐国并没有这么干过，鲁国也是被楚国灭掉的。而梁国是哪，更是不知所云。作者还饶有兴致的驳斥了一下这个段子，齐国能进口丝绸，鲁国梁国为什么就不能进口粮食？齐国不给粮食，别的国家不能进口吗？所以在这个假设里，春秋时期只能有三个国家，齐国、鲁国、梁国，别的国家全都启动了自爆程序。并且鲁国和梁国还得傻到，不知道趁着粮价便宜，赶紧把粮食存起来的地步。而同时，齐国还得铁板一块，上下一心，不能出现任何走私或者勾结的行为。而真实的情况是，管仲这哥们压根就是个商人，是个自由主义经济学家。他主张自由贸易，而齐国正好地处海边，物产丰富，所以齐国人到处做生意，把食盐等商品卖到全国各地。形成大量的外汇流入。齐国才强大起来。作者还举例，当年拿破仑封锁英国，结果欧洲各国走私猖獗。并没什么卵用。反而迫使俄国跟英国成为了同盟，结果拿破仑正是打俄国的时候战败了。所以最先想明白的是美国人，能够贸易，干嘛非要占领殖民呢？在贸易中获得的好处，远比殖民地多的多。所以即使美国打服了德国和日本也一样扶持他们，尽快恢复生产然后相互贸易。让效率最大化。 有人可能提出问题了，石油不是一个贸易战的有利武器吗？作者特地谈到了这个问题，总想切断对方石油贸易的大概只有伊朗人和俄罗斯人，伊朗人认为自己控制欧洲石油来源的30%，只要我不给他油，欧洲就得石油危机。然后欧洲就完蛋了。结果怎么样呢，先下狠手的恰恰是欧洲人，2012年7月1日，欧盟宣布停止从伊朗进口石油天然气，然后美国也这么干了。让你伊朗嘚瑟。然后伊朗怎么办，伊朗人很有骨气，你不买我还不卖了。结果85%的收入木有了。结果是，欧洲从别的地方进口石油，而伊朗却扛不住了。2013年底主动消核，以求恢复石油出口。而另一方俄罗斯，也经常动不动就切断别人的输油管线，08年金融危机以后，俄罗斯开始学乖了。特别是不敢跟中国扎刺了。所以作者的结论就是，全球化如此的今天，有钱就能买到东西。最怕的不是别人迫害而是穷，真要穷了，别人迫害不迫害你，你都一样吃不饱穿不暖。 说完了赚钱和贸易，作者还说了如何花钱，他举了巴西的例子，说巴西的物价全面超过美国，比中国都贵了2倍，这主要由于，中国人赚了钱都拿去生产再建设了，而巴西人则开始大肆去搞社会福利。相当于都把钱花在当下了，并没有为未来储蓄。中国用赚了的一半的钱来搞建设，而巴西只有19%，以至于巴西的公路非常颠簸。有些公司高管甚至要坐直升机上下班。而大量的钱用于消费，巴西的物价也就水涨船高。高物价高福利，随之而来的就是高税收，贪图享乐，没人干活。巴西走上下坡路也就不难理解。 至于教育问题，作者有个大胆的提法，人们在教育上的投资更多，可能不是他们致富的原因，而是他们富裕的结果。也就是说有钱了才愿意获得更好的教育。作者举例说，意大利人到美国一开始更注重职业技能培训，比如咱们这边上个蓝翔什么的，后来意大利人的收入提高了，然后竟然没什么差别了，意大利人也开始习惯把子女送到美国的正规学校。那么教育到底有没有用呢？作者说可能还真的没什么用，大部分的教育都是灌输一堆国家意识，我给您举个例子，比如咱们上学时候的历史和政治，政治没什么用，而历史特别是近代史不少都是错误的，后来人杜撰的。于是在中国出现一个问题，某些地方教育水平不行，但却发展的很好，比如温州。而一些先富起来的人，也大多文化不高。比如王健林，马云都不是什么了不起的学者。所以，教育的作用在于提升全民族的素质，而对于想一夜致富的人来说恐怕作用没那么大。换句话说，上学只是代表你将来致富的机会比较大而已，但并不等于一定能致富。其实我觉得，在一定程度上，我们的教育主要起到了一个区别人的作用，谁知道你是不是人才，只能考试了。 作者还特地说到了教育孩子的方法，作者引用了魔鬼经济学，第五章，怎样才能成为完美的父母，这里面有个结论，研究者列出了16项家庭因素，然后算了一下这里面跟学生成绩有关的因素就8项，这里面大部分都跟学生的父母有关，比如学生父母受过良好教育，学生父母有很高的经济社会地位，家长会说英语等等，而什么家庭和睦，经常看电视，每天让孩子读书都不会影响孩子成绩，所以最后的结论就是，父母是个什么样的人，影响孩子比较大，而父母对孩子做了什么，其实并不影响孩子成绩，作者甚至吐槽，你装的了一时，装不了一世，早晚得露出狐狸尾巴。所以各位父母注意了，你天天干嘛？孩子也在干嘛？如果你对打麻将的热情比读书高，很可能你的孩子也爱上打牌。其实，这东西老话早就说过了，龙生龙凤生凤老鼠的孩子会打洞，不能说绝对，但起码概率很大。所以教育子女的最好办法就是，你希望他变成什么人之前，最好自己先变成这样一个人。 到这，可能不少人有点懵逼了，到底这是不是经济学思维，怎么讲着讲着，串台到教育那边去了，作者可能也意识到写跑题了，于是来了一个一百八十度的大转弯，说了这么多，只是想说明开放社会才是最好的学习方式。很多东西是没办法通过讲课解决的，而是要通过不断的潜移默化的影响实现的。真正的知识来自于融合，是通过无数次的反复实践得出来的，这跟派遣留学生，去上个MBA，有本质的不同。建设一个发达的社会，就是要充分释放每个人的自由，自由人组成了开放的社会，必将是富裕发达的社会。此前无一例外。 在下面一个章节，作者讲了怎么读书，我们可以一笔带过，基本上就是说读书要成体系，光看摘要没什么用，这点我正在实践，我们不同于其他人只给大家读要点，我们基本上还原了一本书的全部内容，完全按照书的写作逻辑来加以解读。所以这更有助于大家建立系统的知识体系，第二呢就是要带着问题去读书，这个也很容易实现，你读这本书为什么？我一般都会在读书的开头告诉大家。第三点就是读书人要互相交流，大家尽可能的发评论咱们交流就好。 然后作者又天马行空的去讲经济发展与环境的治理，这里面提到1900年美国人平均寿命只有47.5岁，而之后直线增长，到了2000年就是77.5岁了。这是为什么呢？大气环境污染，并没有让人们减寿，反而长寿了。这并不是说，污染有利于长寿，只能说污染所造成的的身体伤害被工业化带来的福利对冲掉了。作者还举例印度，说阿三们做饭一直是个陋习，他们烧火之后会造成巨大的PM2.5的污染，然后甚至惊动了当时还是美国国务卿的希拉里，他尝到了清洁厨灶联盟，给印度发放3000万部清洁厨房灶具，但仍然没卵用，成本高，不方便，也没法修。所以最后基本上没人用，还是用牛粪稻草秸秆这么烧火。作者做的结论就是，社会发展达不到这个层次，你给他先进的东西他也不会用。说个题外话，北京和河北的污染基本就不可调和，北京这边对污染深恶痛绝，而河北人民要想治理雾霾就得饿肚子，工厂停工，员工下岗。所以发展阶段不一样，雾霾真的不好治理。你限制他，他就偷着干，不干就饿死。所以怎么解决雾霾，就得先把河北的非污染产业发展起来才行。一味打压没什么用，也压不住。他都没饭吃了，你跟他说要清洁的空气，他理解不了，一个是长期恶果一个是短期恶果，他肯定选择先把眼前的难关度过去再说。作者还拿出了数据，说明这个越污染越健康的悖论，上海北京污染严重，但人均寿命却最高，而西藏空气质量最好，人均寿命最低。所以你为了清洁的空气离开北上广，但结果却往往事与愿违。丢掉了先进的医疗福利，可能反而让你寿命降低。所以任何国家都是线性发展，不走过这个阶段也就不会有工业化福利，城市也一样。一直蓝天白云，然后就跨越工业化了？基本不可能。 随后作者又举了食品的例子，来证明工业化是绝对正确的方向，说现在留下的这些农作物，不是天然就有的，而是我们精心选择的结果，比如小麦天生就爱麦梗脱落，但极少数的基因变异，麦梗没脱落的，被农民发现了，这个省了很大的事，方便收割了。于是农民就精心培育这种变异的小麦，最后导致的是这种变异过的小麦成了主流。还比如玉米，原来野生的只有1-2厘米，本来不过就是种子，传宗接代就行了，但偏偏有人要吃这种种子，于是他们就找更大一些的种，经过上千年的演变，玉米越长越大。所以几乎所有的农作物都是根据人的需要变形出来的。从这个意义讲，压根就没什么原生态。所以所谓的原生态生活方式根本就不存在。先是农业化改造，现在又是工业化改造。人对自然的改造才获得了更好的生活。这点我基本同意作者的观点，但往下，我可能就不太同意了。因为作者提到了转基因，用了一大通生物学的知识来告诉大家，农作物的性状改变自古就有，没必要一提转基因就变色。他说转基因就是基因转变，这事已经干了上万年了，农业一直就是摆弄转基因的玩意，刚才那些例子，其实就是老祖宗们对于转基因的尝试，并且成功了。只不过早期农民是主动寻找变异了的农作物，而我们是主动制造这种农作物而已。所以现在的转基因更加有的放矢，更加高效。而且转基因产品在实验室里经历了远超传统食品的严格检验，理论上已经能做到对人体完全无害。作者反而说他自己多年一贯优先选择转基因食品，因为成本低价格低，还检测严格。这里面我必须澄清一下我的观点，我不懂转基因，也不懂生物，但至少我觉得每个老百姓应该抱有自己选择的权力，因为转基因测试的样本时间不够，10年不出问题并不代表50年以后不出问题。所以我们应该尊重作者的选择，但也请相关部门尊重我们的选择。让我们有选择转基因与非转基因的权力，这就是所谓的个人偏好问题，而不应该用行政手段强制推行。 接下来作者还有惊人观点，那就是对于假冒伪劣一向比较容忍，并不主张斩尽杀绝。他说质量下降，是生产扩大以后首先要经历的现象，是产品走向大众化的必经之路。原来只有少数人能享用的产品，逐渐大众化。而这种市场扩大的第一步，往往是仿冒品增加，劣质产品增加。他的意思是，高质量产品还在，你花费足够多的钱，肯定能买到优质产品，但仿冒品或者假货，也是一种产品丰富。有人愿意买日本雪花牛肉，也就有人爱买瘦肉精的劣质牛肉。购买力不同，各取所需，总比韩国穷人都吃不上牛肉强。而如果把劣质牛肉都打击了，那么只会让顶级的雪花牛肉更贵。而最后作者提出，消灭低劣产品并不能靠监督和打击，而是要靠生产的发展。产品综合质量提高，价格也就下降，自然劣质产品就没有空间了。 下面作者试图实战经济学的绝招，试图为我们破一下食品安全的问题，他先抛出一个概念，很多人都知道的，叫做机会成本，也就是你选择某种方式，是为此放弃其他选择的成本，比如A公司给我开价100万年薪，而我觉得还是每天给大家读书更好，所以读书这个事的机会成本就是每年100万。顿时觉得自己胸前的红领巾又鲜艳了。闲话少说，作者认为，工业化厨房起码每天都做到天天消毒，而你家的私人厨房是做不到的，所以你质疑他细菌蟑螂油污满地，但想想自己的厨房是否比餐馆更干净？原来的食品都是散装的，现在起码都是工业化包装的。塑料真空包装，怎么也比草纸更干净吧。至于食品添加剂，也不应该妖魔化，防腐剂和消毒剂正是为了限制细菌污染而产生的，如果不用添加剂，你买到的食品只能更加不卫生。至于什么致癌物，作者说比较可笑，往往都是大量长期使用某种东西才会产生，比如苏丹红，要一个成年人一天吃三勺，并且坚持30年，才有20%的几率得癌症。所以最后经济学的结论来了，安全不安全是个性价比的问题，彻底安全是不可能做到的，在自己家里吃饭还有可能拉稀呢，所以所谓是否卫生，完全就是一个成本问题，你去五星饭店付出的成本，会让你比在街边吃小笼包安全的多。而随着工业发展，食品上的福利反而增多了，比如之前你以为你长得好看啊，就敢吃荔枝？只有杨贵妃有这个待遇好不好，现在不管长得多丑，也能吃的起了。之前是为了吃不上发愁，现在只是为了吃不好而发愁，这已经是种进步了。而在经济学的世界里，永远只有更好而没有最好的解决方案。 这本书的第二个大部分，生活中的经济学，第一个问题，作者提出户籍制度与计划经济，这可能也是大家关心的问题。1951年7月，公安部颁布了《城市户口管理暂行条例》，其中明确指出“维护社会治安、保障人民安全”的宗旨，对户籍制度治安作用的强调十分明显。当时还是比较宽松的，申明人民有迁徙自由，尽管当时城市中失业现象十分严重。后来为了缓解失业，各地政府开始劝城市居民搬到农村去，也劝阻农村人不要到城市来。之后这成为一种思路，只要就业一不好，就把城市人往农村轰。工人在城里的日子过得好吗？当时苏联来援建，我们也要开始第一个五年计划，但是没有钱怎么办呢？于是来了几招带血的，强制把借钱利率压低，然后停止换汇，全国低工资，低能源价格，低农产品价格，福利也不投入。等于关门印钞票，然后让工人买单，怕把工人逼得太惨，唯一的办法就是把农民弄得更惨，让农民为工人买单。还怕轻工业阻碍重工业，于是将工业全都收归国有，就这么一步一步，所有的经济都上了计划的套路。 所以计划经济就是这样，为了一个重工业计划，几乎得把所有的东西都计划了，甚至农产品都要统购统销，农民不干怎么办，1952年土改让你农民得到了土地，你一炸刺，1956年国家又通过农业集体化把土地给收回来了。国家控制了土地，就不怕你不听话，农民想当地主的梦想彻底破灭，只能当上了国家的佃农。而到了1958年大跃进，人民公社走起，参加公社的农民已经达到了99.1%，这就是说基本上农民完全丧失了土地。这时候农民要想改善生活只能变成盲流涌向城市，但此时我们出台控制盲流的指示，通过户籍制度严厉制止农民进入城市。甚至严格到，不让粮食部门给流民供应粮食，不让给这些农民提供工作，然后我们出台了户口登记条例，彻底的以法律形式限制迁徙。必须要持有劳动部门的录用证明，或者城市户口登记机关的准入证明，才能申请办理迁出手续。但即便这样，大跃进的虚假繁荣，创造出来的就业岗位需求，还是让1104万农村劳动力，成为了城市职工。但很快麻烦就来了，大跃进的泡沫破了，城市生活物资供应紧张。于是我们只好号召大家上山下乡，你以为是让你接受贫下中农再教育，其实就是城市里没工作岗位了，怕你们在这闹事。 到了70年代知青返回城市，恢复了城市户口，并做了特殊安排，把城市福利和户籍挂钩，进一步加强了城乡户籍制度的壁垒。所以这就是户籍制度，跟计划经济伴随而生，既然工业在计划，人也要计划，把人都当成了工具，安排在了自己计划中的位置上。而人民却失去了自由也失去了自己改善生活的机会。改革开放之后，计划经济的牢笼被一点一点砸烂，但户籍改革却屡屡举步维艰，但总体的方向仍然是越来越宽松。作者相信，中国建立符合市场经济的户籍管理，不会太远。所以在这多说一句，别总用现在的眼光看未来，现在户口和房子紧密挂钩，也认为未来户口和房子一定也会挂钩。户籍制度在改革，未来的方向是放松管制，那么房子背后凝结的地域福利也肯定是越来越少。这才是大趋势。 然后作者说了一段银行的悲惨历史，1984年工行成立，基本上就是干农中建交不干的事，而同年银行改革，出了一个昏招说1985年的贷款额度，要按照1984年的贷款量来计算。于是乎银行都疯了，地方政府也乐了，正愁没地方弄钱去呢，地方敢借钱，银行就敢批。由于当时经济匮乏，地方只要投资建设生产，就会有很高的回报率，于是大笔像银行借钱。再加上当年工资改革，各单位纷纷向银行借钱涨工资。所以贷款量当年同比增加50%，而从这年起，中国经济就开始巨大通胀，85年通胀接近10，到了88年突破了两位数，这时候还要价格改革，88年通胀最高干到了38.6%。全国各地都在抢东西。直到9月份政府才出手紧缩，而且一紧缩就是4年，这才把物价暂时压下来。当时外媒甚至说中国经济陷入了严重衰退！ 这一度让上面决策层，想到了走回头路，放弃市场经济。而这些主张落实到政策上就是毫不留情的紧缩，甚至不惜伤害当时的经济，或者说当时这些倒退派的意思就是要杀死市场经济。但最后的结果确是帮了市场经济一个大忙，如果让市场经济的人来调控，恐怕还真的下不了这么大的决心和狠手。比如84年到89年就一直在压通胀了，但总是不舍得伤害经济增长，所以并没什么卵用，就跟我们前几年压房价是一个道理，换了一帮破坏分子上来，竟然干出来一个蜘蛛死了还能生!完全符合奥地利经济学派的周期理论，通胀开始后，政府唯一应该做的是不顾一切压通胀。事实上当年里根的供给侧改革也是这么干的。全力压通胀才压出了美国经济的浴火重生，但其实里根上任的前两年，受到批评和压力是很大的。所以这么看，要不是这些反对改革者的肆意破坏市场经济，中国的市场经济改革可能就真的悬了。1992年邓小平南巡之后，市场整顿已经完成，开启了改革开放元年，废除了一系列的价格管制。开始大幅降低关税。同年12万政府公职人员下海经商，而停职留薪的经商者超过了1000万人，这1000万吃螃蟹的人，到今天基本非富即贵。这就是大趋势下的投资机会。站在风口上的猪想不飞都难。问题的关键就是看你敢不敢站在风口上。 作者说形势比人强，有些事不是你想做就能做好的，而有些事也不是你想扼杀就能扼杀的。所以经济就是这么一个复杂的产物，大家不能只看主观因素更要看趋势。趋势一旦启动了，就不是那么容易停下来的。 作者分析，每个国家的改革都会遇到各种阻力，比如为弱势群体呐喊增加福利，也是一个明显的改革阻力。福利的本质是政客用老百姓的钱在捞自己的政治资本，说白了就是我请客你出钱，而计划经济中的人人有饭吃其实就是最大的福利，但却无法实现，福利必然迫害竞争，没有竞争就没有动力，最后的结果就是一团糟。而这种阻力将长期存在下去。还有一种阻力更加顽固，叫做既得利益。对于这块，作者说，新技术的发展让破除利益集团有了更多办法。这里没举例子，我给您举个例子，比如原来出租车牌照就是利益集团的保护费，后来滴滴出现了，让出租车变得十分尴尬，目前这种新技术和利益集团的竞争仍然在继续。但起码已经开始向既得利益挑战了。当然阻力无处不在，比如我们之前提到的一些什么环保人士，要蓝天不要工业化，要绿水应放弃发展之类的小清新言论，也被作者视为了改革的阻力。 作者接下来说了一下信贷的问题，背景就是大家熟悉的四万亿，说之前做钢贸生意的，也就是向钢铁厂进货，然后卖给其他用钢企业的那些公司，银行一般不给贷款，因为没什么抵押。所以利率都很高，直到4万亿来了，银行手里的钱瞬间增多了，而且被下了死任务，一定要在某某时间段把钱贷出去，于是乎有的钢贸企业其实只需要几千万，被迫要求贷了2个亿走。甚至出现了一个奇葩景象，周宁县钢贸企业老板居多，于是周宁县的身份证都变得值钱了，为什么？有人冒充钢贸老板去银行拿贷款呗，周宁县的身份证好批。而这些主意有的时候还是银行信贷员给他们出的。于是钢贸这个行业彻底疯了。很多脑子活的还把钢贸企业变成了融资平台。拿到钱之后，各种买房买楼，买矿放高利贷。而一批20多岁的年轻人也成为了新一代的钢贸企业家，他们甚至连钢贸是什么都不知道，钢厂的门冲哪边开也不清楚。反正就是向银行借钱，然后游山玩水，花钱享乐。但好景不长2012年螺纹钢从5300降到了3300/吨，底裤被人扒掉了。而银行也是一反两瞪眼，抵押来的钢材，甚至连多少吨都查不清楚，完全就是被坑之后一脸懵逼，甚至几个钢贸老板合伙买一个仓库，然后反复抵押给银行，银行只有吃哑巴亏的份。有统计显示，一吨钢平均被反复抵押了2.79次。银行这时候才知道大事不妙，开始往回收，业务员奖励政策也从放贷变成了收贷。结果钢贸企业基本全被干趴下了。最逗的是，银行有时候也挺机灵，跟钢贸老板说，你把旧的贷款还了，我给你更多新的低利息的贷款。结果钢贸老板本以为过桥一下，结果还给银行后，银行就坚决不贷了。这么一搞，不但钢贸企业倒霉，福建商人都跟着信誉扫地，遍地都是不还钱的。据说当时能卖50万的周宁县身份证，现在连信用卡都不给开了。而市场上到处都是豪华二手车出售。多家银行都去抢着查封钢贸企业的房产，去晚了就没了。而所有的钢贸老板都背上一身债务，但他们还有个信念，万一市场复苏了呢，但等了几年下来，只有更低迷，而从来就没有复苏的迹象。 目前咱们读到了第二个部分，生活中的经济学，作者又提出一个新的选题，那就是汽车限购与市场搬迁，很显然作者是不会赞成限购这么一个反市场的政策的，而他分析为什么汽车限购既解决不了问题，又造成了居民生活不便，却还要这么干呢？答案是两个字，税收！购买汽车有购置税，车船税，消费税和燃油税，只有可怜的车船税归地方，而其他税都被中央拿走了，于是就出现一个问题，钱都让中央政府拿走了，而把麻烦留给了地方，还让地方背了拥堵的黑锅。这跟最近的北京清理服装市场小商品批发市场是一样的，比如动物园批发市场，年营业额200亿，但交税只有6000万，而为了环境交通，政府管理这个市场的投入恐怕都不止这个数。所以对于地方来说，也就自然无所谓。正好上面要清理低端业态，疏解非首都功能，所以首当其冲的就是这种不赚钱还特别麻烦的市场。作者给了个对比，同样都在北京的西城区，金融街上的银行们，政府是舍不得让他们搬走的，西城区的主要税收都来自于金融街，一旦银行想把总部搬到朝阳，估计西城区都不干。所以，作者的意思是，政府也是一个经济的主体，你对他有好处他就护着你，如果你带给他的只有麻烦，他也会主动甩包袱。而这给我们的启示就是，让别人赚钱的生意才能干的长久。永远剥削别人，坑别人，除非是你爹，否则终归不是个事。 作者还介绍了一个我们生活中必须要用的东西就是盐，这个东西在历史上可重要了，一直盐铁专营，盐税一直是国家的税收主要来源。为什么是盐税？因为盐这个东西每个人都要用，还都用的不多，所以大家不知不觉，也不反感，还逃不掉。如果人头税，他就故意隐匿人口。如果你收米饭税，他就自己种粮食了。但盐你造不了，产盐区都被国家高度垄断了。所以这事最早的垄断，用户众多，所以规模经济产生巨大的收入。 我们现在生活好了，很多家庭都用上了小时工，差不多每小时20，多干多得，于是作者假设了一个情形，并用经济学给了分析，作者说如果政府规定，保护小时工权益，干两小时，就有半小时带薪休假时间？会怎么样？看似小时工的收入从2小时40，涨到了50元，但雇主肯定会压价，比如把每小时压低到15元。这样小时工反而利益受损了。于是有文人提议，再设个最低工资不就完了，规定必须20元一小时，那么后果又会怎么样呢？作者假设了，雇主大概就会减少使用小时工，3小时的活，让小时工干2小时得了，干不完的自己干吧。于是相当于小时工每天只有40了，于是又有人出主意了，要保障小时工合法权益，必须跟雇主签订劳动合同。于是雇主也打开小算盘，原来一周干三天，每天3小时，一共36小时，每小时20总计720元，现在只能付得起2小时的钱，于是每月支付小时工的费用只有600，小时工也是一脸懵逼，怎么越保护我，收入越少呢？没多久又有人出主意，要不咱们提高最低工资标准，这次雇主很痛快，跟小时工说，爷！您是我祖宗，我雇不起你了。还是我自己来吧。于是在法律的精心保护下，小时工反而失业了。然后政府为了安置小时工工作，把他们都扩招进了环卫局，我想作者想出这么个无厘头的案例，主要为了讽刺新的劳动法和最低工资标准，认为这些阻碍了市场发展，给企业背上了沉重的负担。而结果是反而引发了更多的失业，和企业退出市场。最后好好的一个市场，不得不去破窗，政府又得靠投资拉动，又扩招公务员来解决就业，反而让自己不堪重负。所以关键点在于保护市场活力，只要市场有活力，才是对劳动者最好的保护。对于这些，忍不住多说一句，基本同意作者观点，但少干预市场不代表就可以胡搞。我们要制定规则，吹好哨，让其他的运动员上场踢球。不能没有规则引发暴力冲突，当然也不能裁判员也下场踢球。 下面一节，作者借着TPP说了自由贸易的观点，当然TPP我们也就不用了解了，因为特朗普上台，这东西基本就废了。作者说，自由贸易不完全体现在关税上，0关税也不一定就是自由贸易，比如在劳工方面，美国主张采用国际劳工组织五大标准，这些标准就是所谓的欧美国家工会那一套，什么集体谈判，取消强制劳动，消除职业歧视什么的。如果中国做到这些，劳动力的优势也就荡然无存。而欧洲美国经济的问题很多也是因为过分的对于劳动力的保护所致。所以，正因为这种东西，我们一早就知道TPP，就是不带中国玩的，不过好在现在被干掉了。自由贸易起源于英国，谁能自由贸易谁就是世界霸主，英国和美国都做到了。制造强国都喜欢自由贸易，因为可以大比例赚钱，而市场大国也喜欢自由贸易，因为很多东西自己造比进口贵，所以提高了生产效率。所以自由贸易基本上是利己利人的。但往往在实施过程中，也不见得一碗水端平，总有些倾斜，比如中国咱们就支持自由贸易，因为我们的制造很强，成本很低，所以比对方拿到的好处更多，而美国虽然也得到了了实惠，但好像没我们得到的好处多，他就觉得吃亏了。美国人也鸡贼，想多吃多占，把自己利益最大化，本来大家各赚50皆大欢喜，他偏要拿80，这就相当于从对方的利润里面抠出30。所以最后自由贸易也就成了大国博弈的工具。所以作者强烈鄙视TPP，认为是对自由贸易的践踏，而且作者写这本书的时候就说到了，TPP恐怕难以执行，排斥中国更加困难，在这点看确实是有预见性的。 作者下一章讲了欧洲难民问题，作者提出一个论调，难民不但不是灾难和麻烦，还是宝贵的人力资源，并举了二战的例子，25万犹太难民涌向欧洲，美国，60万涌向以色列，而美国和欧洲后期的发展都与这些犹太难民分不开。这其中就有著名的爱因斯坦，而以色列弹丸小地，竟然也成为了科技强国，没有犹太难民根本做不到。还有二战后东德难民逃向西德，短期造成了西德混乱，但后来却成为西德重要的经济力量。还有60年代的时候，大陆逃港，双脚落地，就算留下了。于是大量内地表叔涌向香港。有人担心这些人会拖累香港，结果却大相径庭，90年代的时候，香港前100的富豪，有一半都是当年的逃港者。香港能发展起来，从远远落后，到最后又远远超越上海，这些逃港者贡献不小。当然还有迈阿密的例子，古巴人涌向这个城市，甚至卡斯特罗还组织了15万古巴人一次性抵达迈阿密，而这其中大部分是囚犯精神病患者和妓女，以为这样会给迈阿密带去无尽的麻烦，结果却让迈阿密从默默无闻变成了超级大都市，还成为了整个拉美的经济枢纽。于是你得到什么结论，难民是福不是祸，其实也不尽然，作者的态度一转，主要是想说明，难民到底是动力还是灾难主要取决于难民所处的这个社会，而现在的欧洲很可能不具备把难民转化为人力资源的能力了，所以这次的欧洲难民，可能就是一次灾难。这和他们是不是穆斯林没什么关系，意大利和爱尔兰人当年移民美国的时候，也都不光彩，被视为劣等人，但结果却没什么问题，歧视很快也就取消了。甚至肯尼迪家族就是爱尔兰人。 那到底什么社会能转化难民为动力呢？作者说是同化能力，首先得有本土文化，其次有足够的行动力去同化难民，比如美国就是一个移民国家，他一直被称为种族大熔炉，所以什么人种什么文化的人到他那都很快能融入社会，而欧洲就比较麻烦了，他们很可能不能熔化难民的文化，还很可能被巴尔干化，换句话说很可能被难民的文化给熔了。欧洲人在殖民主义之后，出现了明显的内卷化，开始自己守自己的一亩三分地，吃起了老本。放弃了对世界的开拓。他们的高福利造成了欧洲严重的财务负担，而且越来越懒。多来一个人，都是对这种福利的稀释，欧洲人本身就会很排斥。所以欧洲人很担心，难民问题可能只是个开始，如果在这里吃得好穿的好，就会有越来越多的难民涌向欧洲，继续稀释他们的福利。 那么到底该怎么接纳难民问题呢，作者用经济学的方法，给了几个归纳，第一堵肯定不是个好办法。成本太高，也根本堵不住。第二，要停发政府现金补贴，难民不会对政府现金补贴感恩，所以你发的越多，他反而来的越多。你不如给他必要的物品救助，而且还不能长期发，要做出一定期限。让他无利可图。第三坚持双向宗教自由，坚持政教分离，减少宗教危害。第四推行主流文化，既然你要接纳他，就必须在文化上同化。比如对于难民子女的教育，上学等等。第五难民不能给现有的社会福利保障，并放开企业对于用工的限制，不能按照欧洲人的标准雇佣难民。这样才能解决难民的就业问题。但作者最后也说了，难民问题很复杂，很难实行。 作者用一节的内容，谈了一下对于万科的事件的看法，列举了一堆上市公司的坏处，比如要披露，要被监督，要防止被野蛮人收购等等，也同时说了很多公司打死不上市，或者干脆退市私有化的例子，总之一个观点，上不上市，想好了再定。上市圈了钱，把自己的企业弄丢了，就有些得不偿失了。这种投资人和企业家之间的矛盾，一直存在，很难调和。再说到国企垄断问题的时候，作者说应该尽可能的避免被利益集团所控制的局面，而咱们虽然有这样或那样的问题，但我们的巨型央企，基本上还是中性的。而我们的秘籍就是，在一些国计民生的行业中，干脆国企化，不给民企空间，比如兵器工业集团就不可能私有化，一旦私有化，就必然产生官商勾结。另外，我们始终是大政府，中央财力雄厚最有钱，有钱腰杆就硬气，不可能受到来自于市场的冲击。但作者这些观点，恐怕有人会提出疑问了，政府是中性？呵呵，控制这些央企的不就是利益集团吗？作者举例，3G时代为了平衡市场，政府拆分重组电信业，扶持联通打压移动，平衡三大运营商的实力，避免一家独大。而四大行也好，三大运营商也罢，经常互相调动领导，为了就是避免形成势力范围。所以我们的这些做法就是要做到让政府控制央企，而避免央企的势力左右政府。 作者不是为了洗地，他的意思主要是说，中性政府管理下的行政垄断可以接受，但肯定不是值得称道的。很明显行政垄断损失效率。比如给移动最烂的3G牌照，直接让中国用户丧失掉了一个3G时代。行政垄断肯定没法和自由竞争相比，但凡行政垄断的行业都发展不起来，反倒是自由竞争的互联网，我们有很多公司都做到了全球领先，比如阿里和京东的电商，让美国人都很吃惊。还有大家热捧的华为和格力，这都是踏着死人堆杀出来的企业。在全球都是霸主。所以，作者的结论就是，之前需要行政垄断封闭市场的东西，之后未必一直要垄断，他举了美国60年代放开电信市场的例子，美国人也一开始并不理解电信怎么还能放开，但没想到放开之后，却引发了信息革命。所以谈到国企改革，开放市场，要比转变制度重要的多。当行业基本态势转变的时候，顺水推舟放开利益保护，这才是破除垄断最高效的方式。这点多说一句，经济学里有一句话，短期波动看需求，长期增长看供给。技术革命是长期发展的基础，有些垄断你不想打破也没办法，比如当年三大运营商的短信收入是一大块，年三十晚上就几亿的收入。现在微信出来了，短息就变成了可有可无，而运营商打击微信，似乎也不得人心，互联网人就是喜欢这种虽然你看不惯我，但还就是干不掉我的快感。 我们进入这本书的最后一部分，经济学原理，有了之前的铺垫，这一章偏理论，还是多给大家举例子，这样比较好理解一些。第一节我们看作者说，资源是稀缺的未来是不确定的，最基础的经济规律就是供需规律，在经济学的世界里你知道需求和供给两个词，就基本上相当能唬人了。另外两个词，就是成本和收益。所有经济学的东西，基本都围绕这四个词展开，比如我们常说的老太太讹人的事为什么多，不就是因为成本低收益大嘛！警察来了，也不能把老太太怎么样，而反过来，这种事多了，对于做好事的人来说，成本大收益小，所以也就没人干了。这就让供给少了，需求不变的情况下，老太太真要摔倒了，也就没人扶了。所以这事赖谁呢，还不是赖那个成本！而警察也苦啊，我们处理老太太的成本也大啊，把她拘留判刑？还不够给她看病的呢？美国也是如此，比如美国人规定被告认罪就能从轻处罚，为什么这么设计，目的是为了节省司法的调查取证审判的开支。 作者还说了市场规律和经济规律的区别，市场规律就是指什么价格低销量高，服务好收入高之类的，但也有个例外，也就是暴力是市场以外的因素，比如抢劫！他的顾客极其不满意，但并不会妨碍劫匪的收入。暴力介入市场后，市场规律就不复存在了，所以这也是市场规律和经济规律的唯一区别，市场规律不允许出现暴力的情况。但暴力却依然受经济规律制约，比如成本增加到极致，抓到就枪毙，这种抢劫的就会减少，而如果不抓也不处理，抢劫的就会到处都是。支持政府干预市场的人，其实就是支持暴力进入市场，破坏市场秩序。但却最后要受到经济规律的惩罚，比如经济运行成本增加，效率降低，最后我们都会变穷。 作者第二节引用了科斯和周其仁对于中国产权改革的一个争论，科斯认为清楚地产权界定是市场交易的前提，50年后周其仁教授提出反驳，承包到户的土地，并没有改变集体所有制的性质，还是共有的，只不过按照约定的条件交给农户使用而已。很显然承包权不是所有权，但却起到了所有权的一部分作用。其实这里周其仁有点矫情了，但矫情的还在理，科斯哪理解的了什么叫联产承包，在美国人的世界里，根本就没这么个词。而我们是因为拿不到产权，才变异了一个承包权。或者说是不愿意承认产权，才暂时用承包权代替产权。所以这节其实没什么可看，作者说了半天，不过就是一回事。科斯说的是私有化，而周其仁说的是公有化中的私有化，本质都是一回事。就跟一套房子，虽然只有70年土地使用权，但你也觉得，这就是你的产权。 下面作者谈了一下，经济学中最重要的一个概念，也就边际。英文叫做margin，作者说一张烙饼，变大变小都是边上改变，跟中间没什么关系。所以经济学上边际的概念，就是当数量或者质量发生变化时，变化的那一部分。比如边际成本就是数量变化时的那部分成本，边际成本最典型的例子就是图书印刷，成本分两部分一个是固定的成本，比如制版费，可变成本就是纸的钱，所以你印一本书的钱就很贵，印100万本书，基本上也多花不了太多钱。所以，图书印刷就是一个边际成本很低的行业。他的边缘往外扩散很容易。但演唱会则刚好相反，场地费灯光舞美的费用虽然也不便宜，但跟请明星比起来还是差的很多，所以跨年演唱会，你要加个王菲进来，那可就得加很多钱。所以边际成本很高。这里，突然想起个事，就是我们常说的互联网思维，实际上就是边际成本很低，甚至为零，比如我读书给大家，有一个人听，我也得这么读而有10万人来听，我读书的方式也不会变化。但同样的边际收益可能就完全不同，比如有人顾我专门给他读书，可能一个月要出1万元，他一个人听，而在网上10万人听，我只需要向每个人收取1毛钱，一个月也能收入1万元。所以互联网思维，大大的降低了大家的付费门槛。所以现在你知道，为什么互联网出现之后，很多东西都能做到免费了吧，因为本来边际成本就趋近于0，所以他收不收钱其实他的成本也差不多。而用户习惯养成后，只要稍微一收费，就会有巨大的收入。还举我们的例子，比如现在我免费给大家读书，我相信大家爱上我之后，我收每人每天1毛钱，大家也还是会支持老齐的。而每天一毛钱，一年才36块钱，对于一般人来说，仅相当于两份盒饭。 无论是生意人还是消费者都头疼一个问题，那就是定价，有的人经常会问，为什么卖这么贵。作者就解释了一下定价的学问，作者举例软件开发，需要雇人然后租场地，带宽等等，花了1000万，这些钱花出去如同石沉大海，无论你做的出来做不出来都花掉了，所以叫做沉没成本，而软件的边际成本就是制作包装，复制光盘的费用，还有一些销售员的提成，这些会随着你的销售而变化，而你定价至少要把这些可变成本赚出来，否则卖一单就亏损一单，这可不得了。而相反如果你每卖一单都比可变成本高，能产生一定的利润，这时候就有意思了，你最终会达到一个平衡，也就是那个边际，就能够把固定的沉没成本收回来了。然后再卖你的公司就赚钱了。所以，结论来了，你的产品定价，必然要高于可变成本，但低于可变成本加上均摊下来的沉没成本，然后就是一个销量和价格的问题了，想要销量高就要价格低，想要价格高，必然销量低。然后销量乘以价格，最后就是你的总利润，你算一下，哪个组合总利润最高，这就是你的定价模式。这里面有一个可能，就是价格上涨，但销量不降，那么你就应该毫不犹豫的把价格加上去，这就是产品附加价值。比如苹果手机。而这个低于多少钱你不卖，高于多少钱他不买的中间定价区间，就叫做消费者剩余。而有了这个区间，很多商家就会进行市场分割，利用价格歧视进行区别定价，让你愿意多花钱的，尽量拿出更多的钱，而不愿意多花钱的，也能让你买的起。比如时间上特价，团购，尾货这种都是一种价格歧视的表现形式，以追求利润最大化。还有产品上，各种版本比如买汽车的豪华版尊贵版标准版，也是一种价格歧视的手段。甚至想保洁会推出多款洗发水品牌，分别打中高低端三个市场。这些目的都是为了扩大销售利润，尽可能多的赚钱。作者说，具体怎么定下，长期利润十分关键，每个企业都应该追求长期利润最大化，甚至不排除在短期贴钱烧钱，聚集用户的可能。而这也是互联网经济浪潮下的一个特点，靠规模形成效益，先有规模才有效益。没有规模效益也无从谈起。 经济学思维，这本比较枯燥的经济学读物，读的比较细致，也是一种尝试，希望能借这个读书的机会，给大家培养一个理性的思维模式，以后大家如果遇到什么事想不明白了，可以回来反复听听我们的节目，今天我们顺着作者的思路聊聊广告，现在广告费已经越来越离谱，那么有人有个疑问了，到底谁来承担广告费呢，大家肯定会说，肯定是消费者。那为什么厂商要花那么大价钱，请明星拍广告，把产品价格降低一点不是更好吗？但其实真相并不是大家想象的那样，作者提出如果请明星代言而让销售量大涨，企业不但不会涨价，很可能还会让产品降价，而降价之后企业赚的反而更多。有人一脸懵逼了，怎么可能，拍广告花了那么多钱，还降价，然后还要赚钱？不科学啊？其实没什么不科学，你可以出门往上爬楼，听听昨天的节目，我们讲了规模效应，以及边际成本，而很多企业就是边际成本很低，多生产花不了多少钱。生产一个花10块，他得卖12才有的赚，但从生产第二个开始就越来越便宜，到生产100个，只需要每个5块钱的成本，于是卖6块钱，就能保持原有的利润率，而生产1万个，成本会降到2块，这时候他只需要卖2块4就够了。如果请明星拍广告花6000块钱，平摊下来也就每个产品卖3块钱而已。所以不拍广告，消费者要出12买走，拍了广告买的人多了，大家只需要出3块钱就能拿走了。再比如咱们的读书节目，如果只有一个人听，他雇老齐一个月怎么也得几万吧，但如果1万人听，每个人出几块钱就够了。如果10万人听呢，大家就不用出钱了，自然有广告商买单。所以当初央视的广告招标会，企业家为黄金资源一掷千金，说扔进去一辆奥拓，就可以开走一辆奥迪。 下面作者讲了你工作别人才会有工作，听起来很绕，给您翻译一下就是，要跟神一样的队友玩，千万别掉进猪一样的队友圈里。生活在懒汉中间，你不可能赚到钱，因为他们懒，就赚不到钱，没钱也就不能消费，你也就没事可做，机会很少。相反一些积极的人，总是努力工作，而你为他们提供某些服务，就已经能有很多工作机会了。老齐举个不恰当的例子，东莞扫黄之后，一段时间产业凋零，开出租的和卖假包的都少了。所以就业岗位不是恒定的，不是替代关系，有人退休才有人上班。恰恰相反，大家都忙，才会更忙。大家都闲着，你就会更闲，这就是大城市跟小城市的差别。有些人以为一身的能耐，但逃离北上广回到小城市，完全不适应，干什么都不成，就是这个道理。所以从这个角度讲，根本不用担心什么人工智能取代我们的工作岗位，到时候会有更多的岗位出现。比如5年前你知道什么叫O2O，知道什么叫VR，什么叫专车，10年前甚至连网上购物，当个淘宝店主都是不可想象的。 其实所有的商业中介交易都是由信息不对称产生的，所以作者说没必要妖魔化信息不对称，有些人是利用信息不对称，故意骗人！比如北京中关村原来就是骗子集散地，翻新机假冒水货到处都是，但最后也在市场的强大作用下不得不关门，而也正是因为这种信息不对称的恶果，创造了京东的奇迹。而解决这个信息不对称的最好办法，就是反向信息不对称，说白了就是客户评价嘛，现在网上购物反而安全，就是引入了客户评论体系，你买完他的东西，他不知道你会怎么评论，所以哪敢拿假冒伪劣忽悠你，你反过来给他一个差评，他以后就再也卖不出去了。一些质量好的东西和产品也就一点一点的做出口碑，做出了品牌，而逐渐也就有了价格优势。所以作者说，大家都讨厌信息不对称，但如今信息不对称已经是双向的，商家知道的多，消费者根据自身情况，也知道的不少。在一个强大的市场机制压力下，他要想把事情做好，唯一的途径就是实话实说。 在全书接近末尾的位置，作者终于说到了一点经济学和投资的那一点联系，这就是复利。但非常不恰当的举了一个天文的例子，要在50万亿年之后搞一个什么星星，反正相当无聊了。但复利这个事却很重要，因为所谓复利就是利用时间去增值。投资的人会让时间变成他的朋友，而负债的则恰恰相反，时间会成为他最讨厌的对手。这个东西，作者没细讲，我们暂且留个悬念，老齐准备再下一本书，专门讲讲投资，特别是股市投资。到时候会有大篇幅的内容，到时也会算很多的账，这里简单给您说下，如果您当下有100万，假定每年投资有15%的增长率，2033年你的财产将翻10倍，也就是超过1000万，2049年，您就能完成那个小目标，也就是1个亿了。33年翻100倍，这就是复利的威力。具体怎么能每年15%，怎么才能稳定的保持33年，这个我们留到以后再讲。 作者还写了政府债券的问题，各国政府总是倾向于举债，然后来发展经济，以求得当下民众的支持，但借钱这东西不是无序扩张的，到了一定程度就会让人担心，政府是否有能力偿还，一旦有分析师认为有风险，他们就会调低评级，甚至抛出债券，债市就会下跌，而政府要想再发债，就要付出更大的成本也就是，债券的利率上升。现在我们国债收益率正在往上走，这个事情正在发生。大家可以关注一下债市。也可以到我的另外一个时事财经点评的号，齐俊杰看财经上去，我们会经常关注资本市场包括债市的动向。 而在中国，国债是一方面，地方上的举债主要看地方国企，因为预算法明确禁止地方政府发债，所以大部分情况下地方政府会用一些国有公司，负责当地公共工程建设，然后地方政府来兜底。这些债信用高，风险低。地方政府用这种融资平台，绕过了地方债的禁令。我们其实也已经意识到了这个问题，光禁止已经没用了，所以正在着手改革，但改革还不能一蹴而就，到底地方债该怎么发，之前的该怎么清理，地方政府以后的收入来源，这些都要做全面的考虑。 全书最后一个问题，就是职场中的性别歧视问题，跳跃度还真是够大。作者说看起来男性更有优势，女性则处于职场劣势，但如果按照小时计算，男女收入差不多。所以男性的收入多主要源于加班多，而女性则照顾家庭没办法有那么多工作时间。而不生孩子的女性，收入甚至比同类男性还高。作者想说明的问题是，不应该给予强制的女性员工照顾，但也不强制不照顾。是否对女性员工好一点，应该全凭雇主自愿，是一种情怀而不应该是个规定。否则的话可能造成一个结果就是女性员工更难找到工作。这点老齐深有体会，老齐认识很多公司的老板，在放开二胎政策之后，都不太爱雇佣女员工了。这也是没办法，我们可以谴责这种歧视，但却无法改变，这大概就是市场选择的结果。 我们用了整整一周时间，至此这本书就完全的给您读完了，当然这其中有很多观点我相信您也不尽认同，而有一些东西我也并不感冒，但这就是一种思想的交流，通过接触别人的世界观价值观，我们才有更多的知识交换的空间，而你通过驳斥别人的观点，也必然会对自己的观点进一步的升华。所以，海纳百川有容乃大，不同思想的碰撞，才能更好地学习。蔡元培的北大讲究兼容并包，没有人否认那是中国教育史上一个伟大的时期。所以获得、接受、反驳、补充都是获得知识重要步骤。 "},"book_1.html":{"url":"book_1.html","title":"美国人为什么支持特朗普","keywords":"","body":"美国人为什么支持特朗普 这本书是英国金融时报写的，中信出版社出版，通过这本书简单的了解一下，这个主宰美国并且影响世界的男人，唐纳德特朗普。 这本书分为四大部分，第一部分谁是特朗普，第二部分也就是本书的核心，美国为什么有人支持特朗普，第三部分是将来时，特朗普会给美国和世界带来什么，第四部分谁能阻挡特朗普。 第一章，也就是谁是特朗普。这是金融时报中文网的一个专栏作家，刘裘蒂写的。这个人是特朗普女婿的合伙人，他说特朗普这个人其实很有远见，他透露了一个细节，其实特朗普的第一个老婆和第三个老婆，结婚的时候都不是美国公民，结婚之后特朗普才帮他们改了国籍，他在70年代就说，迟早有一天会竞选总统，而近50年后，他显然做到了。这个人很土很豪，算个小富二代，他爸爸就是干房地产的，他也是，而他的所有作品基本都是土豪金，然后不断地跟媒体吹捧出风头，当年他做的一款电视节目很火叫做门徒，就是经过一场海选，然后最后选出的优秀选手特朗普教他们做生意，有点像我们的赢在中国。特朗普很早就自我吹捧，并很有远见的把自己变成了一个明星，用现在的话说叫做大IP，这也是这次无论希拉里团队花了多少营销成本但都处于下风的主要原因。而这个人极度自恋，他把自己的名字变成了品牌，什么特朗普伏特加，特朗普罐装水，我们熟悉的特朗普大厦，特朗普酒吧，甚至特朗普高尔夫，特朗普游戏等等。 第二位描写特朗普的作者，叫做马丁迪克森，是一位跟特朗普吃过饭的人，马丁说，特朗普是一个特别爱兜售他自己哲学的人，用中国话来说就是好为人师，甚至高尔夫他也要要炫耀一番。说道他建造的高尔夫球场，他竟然用了举世无双来形容。可见这个人相当自负。作者挺有意思，一边学特朗普的口吻说，他的餐馆是全纽约生意最火的餐馆，一边自己幽默的环顾四周，竟然没几个客人。特朗普的父亲是一位富一代，自力更生发家致富的地产商，而他一小就被父亲送到了军校，接受严格的训练，后来读了沃顿商学院，出来后开始跟老爸一起做房地产生意。30多岁的时候，就建成了现在的纽约地标建筑，特朗普大厦。不过特朗普的生意也不是一直顺风顺水，在上世纪90年代的时候，楼市萧条与不景气，他的大西洋城就不怎么好。他名下好几个产业都开始破产。但似乎项目破产，并未影响特朗普本身，他仍然有门徒以及环球小姐两个非常火的节目，也成为了美国最有名的商人。作者问特朗普，你这么玩命工作累吗？特朗普回答，他真的喜欢工作，喜欢上班而且是发自内心的喜欢，所以有的时候，我也在想，当你真的喜欢某种事的时候，你可能完全不觉得累，现在之所以不想上班，可能就是你不喜欢现在的工作而已。这大概跟咱们的天生我才必有用，是一个道理。 特朗普在饭局上，对作者主动炫耀，说自己的净财富达到80亿美元，但当年的福布斯统计，他只有30亿美元。特朗普给出的解答是，他们无法统计出一个完全靠谱的数字。所以，坚持自己很有钱，特别的有钱。这么有钱的特朗普，请这位马丁主编，吃的这顿饭有什么呢？烤鸡肉加牛肉三明治，三杯可乐，还有咖啡，总计一共74美元。 第三篇文章来自爱德华卢斯，他写特朗普的时候，美国大选已经开始。当时特朗普就有势在必得的感觉，甚至他说如果共和党不把他顶上去，他就以第三方候选人的身份发起竞选。有人评价特朗普，说他的自吹自擂以及诋毁对手，反而助推了他的人气，如果他有明确的意识形态，别人就知道怎么回应他了，可是他没有。给您翻译一下，主要是说特朗普无招胜有招，根本就没有立得住的观点主张，总是随风摇摆，所以别人想对战，都没有立足点。举了两个例子，一个是之前他支持单一付款人医保法案，但后来他又要废除奥巴马的医保法案，他之前，赞成堕胎，后来又反对。对于移民也是先支持，后来坚决的反对。大骂墨西哥抢走了我们的工作。作者说了一个细节，就是他四次找理由躲过了越战兵役征召，试图来证明他的人品。还天天跟电视台和美女们混在一起，但就这样一个人，反而在共和党中人气超高。而且这个家伙连酒都不喝，所有的问题都摆在明面上，想深挖点隐私爆料都爆不出来，简直透明的一样，这让他的对手们感到十分头疼。 作者还提出一个问题，特朗普到底像谁？像意大利的贝卢斯科尼？吃牛这个劲很像，但似乎特朗普嘴巴更大，甚至威胁说要把数百万人集中起来驱逐出境。像希特勒？他诋毁民主体制堕落的不可救药，鼓吹阴谋论和种族主义，发誓要扭转国家的衰落。又或者特朗普像普京，想土耳其的艾尔多安，也像印度的莫迪，反正就是那种个人主义，一意孤行的政治人物。特别奇怪的是，作者说美国人很多都很喜欢普京的强硬。这点我表示怀疑。因为从经济和居民生活上来说，俄罗斯跟美国早就已经不在一个水平上。 作者说，不管怎么样，特朗普的竞选之路，从一开始似乎就学了普京，比如假想一个外部威胁，比如特朗普总是拿反恐和非法移民说事。然后语言通俗，打压全国性电视台等等，二人都很随性，难以捉摸。反直觉。总结成中国话就是不按照政治家的套路出牌。普京在位让俄罗斯经济每况愈下，但支持率仍然很高，而特朗普言论过火毫无逻辑，但就是有人爱听。 到底为什么美国人这么支持这个活宝，甚至这次大选，特朗普赢得没有悬念。作者说，他之前也并不认为特朗普能入主白宫，他说到本世纪40年代初，美国将成为一个少数族裔占多数的国家，每次大选白人选民都会减少，共和党入主白宫也就越来越困难，甚至是一个数学上不可能的事。可以看出，底层白人在美国变得越来越没地位，奥巴马也不断鄙视这些贫困的白人，而这也给此次共和党运用舆论，创造了一个很好的条件。既然这些原住民对于现状不满，他们也就不在乎到底上台的是谁，反正现在的民主党滚蛋就好。 几年前奥巴马当总统的时候，大家认为美国的种族矛盾将缓和，没想到的是，种族矛盾只是翻开了另一个篇章，支持特朗普的人中，有五分之一认为，林肯总统解放黑奴是个错误，三分之一的人希望南北战争，南方获胜。所以种族主义，是特朗普竞选的一大法宝。但光有种族主义，显然是不够的。对于基础设施，美国人也颇有微词，他们觉得自己的基础设施太过陈旧，政府拿不出钱来给自己改善居住环境，比如地铁，高速公路，比如暴雪过后的道路清扫，美国政府总是缺位的。还写了几个细节，比如纽约地铁经常能看到老鼠乱窜。所以，美国民众迫切希望加强基础设施建设，这点特朗普提到了，而希拉里的竞选中，并没有太多表态。 另外，特朗普还主张，在墨西哥边境修筑巨型的隔离墙，这个政策也是很应景，因为欧洲正在饱受难民之苦。美国人民看在眼里，而且已经产生了切肤之痛，巨大的恐惧又被特朗普给利用了。欧洲和美国这些民主国家，正在担心来自穆斯林世界的移民，因为他们无法分辨出这些人中，哪些可能成为极端分子，所以这也就不难理解，为什么美国民粹主义盛行，欧洲也是不断的公投，民粹主义也是压都压不住。一开始大家相信，能够通过贸易和全球化帮助落后地区发展，比如马歇尔计划，取得了巨大的成功，但后来西方世界发现，这个玩意仅限于民主国家，比如巴尔干非洲以及阿富汗，你怎么帮助他建设，都解决不了问题。也没什么贸易可做。反而你沾上这些地方，便跟恐怖主义沾上了，甩都甩不掉。所以，大家现在想的是，还是别那么博爱了，把自己小日子过好就行。不光特朗普，希拉里也提出了贸易保护主义，可见贸易保护已经深入人心。虽然大家一致认可的，未必就是对的！既然希拉里都提出贸易保护，特朗普要想升级一步，那也就只有修墙了。虽然最后他未必干的成这个事。 有个商人是这么看特朗普的，首先美国人喜欢支持赢家，或者说赢家心态，喜欢支持那些对自己有极度信心的人，而特朗普就是这么个自负的人，他把自己的名字都变成了品牌。甚至他不用宣传，大家就已经知道他，而且是如此鲜活。其次，商人没什么不好，商人能管理好那么大一个公司，也一样能汇集他人智慧，管理好国家。第三，也是因为他的商人身份，所以会很务实，选举就是商人的营销，而营销方案，不见得全会兑现。所以不必为特朗普的过激言论担心。翻译一下，作者的意思就是说，特朗普应该还是能够拎得清的，商人最清楚哪些该做，哪些只是吸引别人注意的说说而已。 有经济学家做了统计，特朗普的拥护者都来自于中下层的白人，他们是被忽略的群体，用俗话说就是人嫌狗不待见，民主党嫌他们是累赘，不上进，共和党似乎也不怎么喜欢他们，就是咱们这边说的屌丝群体。而且还是那种比较低端的屌丝愤青，而这个群体人数在这几年越来越多。有数据显示，美国中产群体从70%下降到了50%，而那些被挤出的20%，基本都成了屌丝。这些人学历不高，没上过大学，工作收入都不如意，生活比较困顿。他们就像咱们的城市原住民一样，被外地人侵占了工作岗位。他们经常抱怨，美国的人权平等政策，明显偏袒黑人和少数族裔，拿走了原来属于这些白人的工作机会。书里还引用了一本报告，是一个叫做莫雷的美国社会学者做出的，名字叫做分崩离析，美国白人五十年来的恶化。用以来刻画美国白人分崩离析的状态。 他以一个鱼镇为样本，这个鱼镇是一个白人社会的缩影。而结论触目惊心。 1、鱼镇的白人目前处在婚姻状态的仅48%，不到一半，而在1960年曾经是84%，离婚率则从5%上升到了34%，非婚生子女从3%升到了29%。 2、家庭中家长工作时长40小时的比例看，50年间，从81%跌到了53%，也就是说现在至少有一半家庭靠打零工或救济度日。 3、10万居民中囚犯平均数从213人，增加到957，上涨了3.5倍。 4、没有信仰约束的人，从4成上升至接近6成。 另外还有一个报告显示，美国中年白人的发病率和死亡率都在上升，而特朗普的这次崛起，有人分析，正是因为他看到了这么一个庞大的，具有凝聚力，对社会不满的群体。而特朗普之于这些白人来说，成为了他们发泄心中积压了多年怨愤的窗口。所以，特朗普越是表现出来不像一个政客，他得到的支持也就越多。他表现的越率真，这些白人就越是死心塌地。 大多数的特朗普支持者都厌恶虚伪，特别讨厌那些摆出一大堆道理，然后骗自己捐款的人。而这正对特朗普的路子，他说不需要捐款，也不要钱，自己无比有钱，所以不可能被人收买。这也算是特朗普的互联网思维了，用免费吸引用户，然后将竞争对手烧出局。 有人透露了特朗普的一个细节，他的口头语是赢，他甚至在看到一只特别肥的鸡肉的时候，说这一块看上去赢了。而他这种我们非常擅长赢，我相信赢的心里暗示，也不断的增强他的支持者的信心。特朗普是个商人，深谙营销之道，他经常说，美国正在快速衰落，我们什么都做的不对，我们正在成为全世界的笑柄，这其实就是痛点营销，给你的顾客痛点，并反复强调这个痛点，然后提出合理的解决之道。而解决之道是是什么呢？他要减少白人比例下降的速度，承诺将把美国1100万非法移民驱逐出境，并在墨西哥边界树立巨大的隔离墙。 他的第二个痛点攻击的是经济，说经济很不安全，抨击对冲基金经理，说奥巴马的政策只让美国最富有的1%人口受益，在抛出诸如刚才我们提到的，中产比例从7成下降到了5成，大家有了切身之痛，就越来越对民主党的政策表示不满，而解决方案就是，美国优先。减税、财政刺激、大兴土木，给白人们创造更多的工作机会。 其实特朗普很像里根，里根上任之初，也被贴上了蠢货，煽动民族情绪，甚至贴上了法西斯主义的标签。还有人担心他挑起新的世界大战。然而事实证明，里根的供给侧改革，让他成为了一个伟大的总统。所不一样的是，里根比特朗普礼貌多了，特朗普曾说墨西哥移民就像是一场强奸，当然现在大家仍然是一脸懵逼，不知道他到底哪句是真哪句是假，估计他自己也没想明白。是不是真要加息，是不是真要修墙，是不是真的要贸易保护，要减税，要放弃对海外盟友的军事保护，进而美国外交战略全部收缩，这还得等他真的坐到那个位置上具体再看。 来看第三章，特朗普会给世界带来什么？ 特朗普是一个孤立主义者，他最大的竞选主张就是修墙，贸易保护。所以他的当选，直接让TPP报废，有人说WTO可能也会报废，这个就得再看了。特朗普是个商人，所以等价交换，付出劳动就要付费，他竟然去找韩国和日本这些受保护的盟友收保护费，这还真是蝎子拉屎独一份，你们要不交钱，爷就不干了。很显然我们谴责美国是世界警察，到处找茬惹事，美国人也是宝宝心里苦，不但没吃你们家大米，人家还往里搭钱好不好，维护世界和平，你以为容易呢？ 美国前财长劳伦斯萨默斯就评论，特朗普与墨索里尼和希特勒比较，有些过度紧张了，特朗普的上台并没有那么糟，不过民主进程估计是会失去方向，特朗普一致强调，他将碾碎那些妨碍他的人，现在他上台了，这些人是否已经颤抖了呢？一个煽动者登上了高位拥有了至高无上的权力，控制了安全局，联邦调查局，还有国税局，他会不会打击报复，让那些跟他竞选的人吃点苦头呢。萨默斯没有明说，但我估计会，特朗普并不是什么高尚的人。 萨默斯还说，美国经济已经低于2%，这时候还保护主义，很容易带来不确定性，损害新兴市场信心，从而触发金融危机。 有个作者介绍，特朗普属于那种睚眦必报的，特别爱打官司。有人写关于他的书，他就起诉人家，有电视台调侃他，他就让人家在电视面前宣读法律并且道歉。这在美国这样一个民主社会是不可想象的另类，他还特别喜欢玩推特，也就是咱们的微博，并在微博上经常跟人家撕逼，骂人家傻瓜笨蛋，他有650万粉丝帮他摇旗呐喊，在咱们这也算是个大V了。而且这事弄得我们很被动，他总是发推特，说政治问题。弄得我们外交部回也不是，不回也不是。他发个推特咱就得开个发布会，还真是从来没遇见过发推特执政的总统。 最后一章，谁能阻挡特朗普，其实已经没什么意义了，因为很显然没人能够阻止他，他已经成为了美国新总统。从教皇到布隆伯格，再到希拉里，面对每个对手，特朗普都有杀手锏，比如希拉里，特朗普的10万亿美元减税计划，让他彻底亮了。而且在互相爆料泼粪中，特朗普完胜，他的坏都是写在表面的，而希拉里的不光彩却是在背地里，所以一个粗俗的率真打击优雅说谎，特朗普赢得毫无悬念。 "},"django_deploy.html":{"url":"django_deploy.html","title":"Django 应用部署与监控","keywords":"","body":"Django 应用部署与监控 1、部署准备 一台云服务器，初级版（1核1G）即可，安装CentOS7.2版本操作系统，建议最好使用阿里云；一个已经完成ICP备案的域名。 2、环境搭建 2.1、新增用户 操作CentOS服务器，最好不要使用root根用户，其一是防止误操作；其二是避免在部署的过程中出现权限相关问题。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ adduser yves # 添加yves用户 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ passwd yves # 设置yves的操作密码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ usermod -aG wheel yves # 将yves添加到超级权限组 2.2、Python环境 安装Python环境之前，需要在操作系统上安装必要软件并更新yum源。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum update # 更新yum源 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum upgrade [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc # 安装必要软件 这个步骤需要一定时间，耐心等待完成之后再进行下一步的安装Python-3.6.4。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir src # 家目录下新建src目录存放下载文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd src # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz # 下载Python-3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ tar -zxvf Python-3.6.4.tgz # 解压 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd Python-3.6.4 # 进入解压目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ ./configure LD_RUN_PATH=/usr/local/lib LDFLAGS=\"-L/usr/local/lib\" CPPFLAGS=\"-I/usr/local/include\" [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ make LD_RUN_PATH=/usr/local/lib # 编译 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo make install # 安装 上述下载、编译、安装等操作完成后，需要验证是否安装成功，出现下列版本信息即表示安装成功。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ python3 -V Python 3.6.4 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip3 -V pip 19.3.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6) 安装最好用的python虚拟环境和包管理工具pipenv。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo pip3 install pipenv 问题：sudo: pip3: command not found 在环境变量中添加 alias sudo='sudo env PATH=$PATH' 并使其生效即可。 2.3、MySQL数据库安装 CentOS默认安装mariadb数据库，首先你需要卸载. [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ yum remove mariadb-libs.x86_64 安装MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/src/ # 进入src目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm # 下载安装依赖文件 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install mysql-community-server # 安装MyS数据库 MySQL数据库的相关操作。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld start # 启动 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld stop # 停止 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ service mysqld restart # 重启 查看MySQL数据库的初始密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cat /var/log/mysqld.log | grep password 登录MySQL数据库。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mysql -uroot -p 修改MySQL数据库密码。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ SET PASSWORD = PASSWORD('123456'); 开启远程连接 mysql> show databases; mysql> use mysql; mysql> show tables; mysql> select Host, User from user \\G; mysql> update user set host = '%' where user = 'root'; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql> flush privileges; Query OK, 0 rows affected (0.00 sec) 开启genelog mysql> set global general_log_file=\"/tmp/general.log\"; mysql> set global general_log=on; 创建用户 mysql> create user 'imooc'@'%' identified by '123456'; 赋于用户权限 mysql> grant all privileges on *.* to 'imooc'@'%' identified by '123456' with mysql> grant option; # 所有权限 mysql> grant select on *.* to 'imooc'@'%' identified by '123456' with grant option; # 查询权限 mysql> revoke all privileges on *.* from imooc; # 收回权限 mysql> flush privileges; 忘记密码 [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 添加skip-grant-tables mysql> show databases; mysql> user mysql; mysql> update user set authentication_string = password(\"123456\") where user = 'root'; [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo vim /etc/my.cnf # 去除skip-grant-tables [yves@iz2ze0mhixialmdhi9pn5vz ~]$ sudo service mysqld restart 3、部署代码 将项目代码上传到部署目录下，方法比较多，推荐使用Git进行代码版本的管理，首先需要在服务器上安装相关应用并从远程仓库拉取代码，拉取完成后修改成生产环境的配置。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install git # 安装git应用 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir ~/apps/ # 创建项目部署目录 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/apps/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ git clone '远程仓库地址' # 拉取代码 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd '项目目录' [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install --deploy --ignore-pipfile # 安装所需依赖 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py migrate # 创建数据库 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run python manage.py runserver 0.0.0.0:8000 # 启动服务 服务启动后，即可以通过公网IP:8000端口访问应用，注意：务必在阿里云管理控制台放开8000端口，否则无法访问。 4、Gunicorn安装与使用 直接使用runserver命令启动的开发服务器并不适用与生产环境，因此使用Gunicorn作为生产环境服务器。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv install gunicorn # 安装gunicorn [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 0.0.0.0:8000 # 项目目录下启动 启动服务后，即可以通过公网IP:8000端口访问应用，但此时css样式全部未加载导致页面乱的一塌糊涂，这并非bug，而是由于处理静态文件请求并不是Gunicorn擅长的事情，应该交由更专业的Nginx去做。 5、Nginx服务器安装与使用 Nginx是一个高性能的HTTP和反向代理web服务器，它的功能非常多，这里主要用它来处理静态文件以及将非静态文件的请求反向代理给Gunicorn。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install epel-release -y [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo yum install nginx -y # 安装Nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl start nginx # 启动nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl stop nginx # 停止nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ sudo systemctl restart nginx # 重启nginx [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ 直接在浏览器输入公网IP，看到nginx欢迎页面即表示安装并启动成功。下面就是修改应用中的settings.py配置文件，推荐Djecrety生成一个一个线上环境的SECRET_KEY。 DEBUG = False ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '公网IP或域名'] SECRET_KEY = ’***‘ STATICFILES_DIRS # 注释 STATIC_ROOT = os.path.join(BASE_DIR, 'static') # 新增 将项目的静态资源统一收集到static目录下。 pipenv run python manage.py collectstatic Nginx的配置位于/etc/nginx/nginx.conf文件中，其中项目的配置文件可以在/etc/nginx/conf.d/目录下新增，但是必须以.conf后缀结尾。 server { charset utf-8; listen 80; server_name 公网IP或域名; location /static { alias 绝对路径; } location /media { alias 绝对路径; } location / { proxy_set_header Host $host; proxy_pass http://127.0.0.1:8000; } } 配置文件新增完成之后，重启Nginx即可访问应用，至此基本完成Nginx与Gunicorn部署Django应用的目标。 6、Supervisor安装与使用 由于服务器与网络存在不稳定的情况，因此直接在控制台启动应用的方式存在宕机的风险，并且没办法对相关进程进行监控，因此使用Supervisor来管理Gunicorn进程，这样当服务器重新启动或者Gunicorn进程意外崩溃后，Supervisor会帮我们自动重启Gunicorn。 由于Supervisor目前还不支持Python3，因此需要使用CentOS系统自带的python2版本进行安装。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ pip install supervisor 在家目录下新建相关的文件夹。 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/conf.d # 创建配置文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ mkdir -p ~/etc/supervisor/var/log # 创建日志文件夹 [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ cd ~/etc/ [yves@iZ2zefeybcvjrhsdgz4uymZ ~]$ echo_supervisord_conf > supervisord.conf # 生成supervisor配置文件 修改supervisor.conf，让Supervisor进程产生的一些文件生成到上面我们创建的目录下，而不是其默认指定的地方。 [unix_http_server] file=/home/yves/etc/supervisor/var/supervisor.sock logfile=/home/yves/etc/supervisor/var/log/supervisord.log pidfile=/home/yves/etc/supervisor/var/supervisord.pid user=yves [supervisorctl] serverurl=unix:///home/yves/etc/supervisor/var/supervisor.sock files=/home/yves/etc/supervisor/conf.d/*.ini 配置修改完成之后需要在conf.d文件夹下新增应用的配置文件，注意文件必须以.ini结尾。 [program:projectname] command=pipenv run gunicorn projectname.wsgi -w 2 -k gthread -b 127.0.0.1:8000 directory=/home/yves/apps/projectname autostart=true autorestart=unexpected user=yves stdout_logfile=/home/yves/etc/supervisor/var/log/projectname-stdout.log stderr_logfile=/home/yves/etc/supervisor/var/log/projectname-stderr.log 启动supervisor。 supervisord -c ~/etc/supervisord.conf # -c 表示根据配置文件启动 进入supervisor管理控制台。 supervisorctl -c ~/etc/supervisord.conf 7、问题与解决 7.1、后台管理系统图片上传报500错误 这是由于Nginx的权限问题导致的，网上大多数资料说将'Chmod 777 /media'执行就好，但是我试了不行，后来将/etc/nginx/nginx.conf中的user改成root就好了。 "},"django.html":{"url":"django.html","title":"创建第一个 Django 应用","keywords":"","body":"创建第一个 Django 应用 创建项目 创建项目目录并安装虚拟环境： yvesdeMacBook-Air:Python yves$ mkdir Propaganda // 创建项目目录 yvesdeMacBook-Air:Python yves$ cd Propaganda yvesdeMacBook-Air:Python yves$ pipenv install // 安装虚拟环境 Warning: the environment variable LANG is not set! We recommend setting this in ~/.profile (or equivalent) for proper expected behavior. Creating a virtualenv for this project… Pipfile: /Users/yves/Documents/GitHub/Python/Propaganda/Pipfile Using /usr/local/bin/python3 (3.6.4) to create virtualenv… ⠧ Creating virtual environment...Already using interpreter /usr/local/bin/python3 Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6' New python executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python3 Also creating executable in /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/python Installing setuptools, pip, wheel... done. ✔ Successfully created virtual environment! Virtualenv location: /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM Creating a Pipfile for this project… Pipfile.lock not found, creating… Locking [dev-packages] dependencies… Locking [packages] dependencies… Updated Pipfile.lock (ca72e7)! Installing dependencies from Pipfile.lock (ca72e7)… &#x1F40D; ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. 启动开发环境并安装Django： yvesdeMacBook-Air:Propaganda yves$ pipenv shell // 启动虚拟环境 Launching subshell in virtual environment… bash-3.2$ . /Users/yves/.local/share/virtualenvs/Propaganda-ojQAzsrM/bin/activate (Propaganda) bash-3.2$ pipenv install Django // 安装Django Installing Django… Adding Django to Pipfile's [packages]… ✔ Installation Succeeded Pipfile.lock (12ffd6) out of date, updating to (ca72e7)… Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (12ffd6)! Installing dependencies from Pipfile.lock (12ffd6)… &#x1F40D; ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 4/4 — 00:00:04 Django常见命令有创建项目、创建应用、创建超级用户、数据表创建及更新、启动服务器等，这些命令都包含在 django-admin.py 和 manage.py 里。除此以外 manage.py 还包含其它有用的命令，基本包含： 创建新项目：django-admin startproject project_name 创建新应用：python manage.py startapp app_name 检测模型变化生成新的数据库迁移文件：python manage.py makemigrations [app_name] 同步数据库与模型：python manage.py migrate 启动服务器：python manage.py runserver 创建超级用户：python manage.py createsuperuser 修改用户密码：python manage.py changepassword username 打开交互终端：python manage.py shell（dbshell指数据库交互） 查看当前版本：python manage.py version 清空数据库内容只留下空表：python manage.py flush 搜集静态文件：python manage.py collectstatic 创建Django项目并启动验证是否成功： (Propaganda) bash-3.2$ django-admin startproject Propaganda // 创建项目 (Propaganda) bash-3.2$ ll // 项目文件结构 drwxr-xr-x 7 yves staff 224 Dec 6 21:06 ./ drwxr-xr-x 12 yves staff 384 Dec 6 20:34 ../ -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 7 yves staff 224 Dec 6 20:56 Propaganda/ -rwxr-xr-x 1 yves staff 630 Dec 6 20:56 manage.py* (Propaganda) bash-3.2$ python manage.py runserver // 启动项目 Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply them. December 06, 2019 - 13:14:35 Django version 3.0, using settings 'Propaganda.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. 在浏览器输入 http://127.0.0.1:8000/ 看到Django启动页即表示项目创建成功。 创建应用与细节优化 应用创建 项目创建成功并验证通过后就可以创建相关应用： (Propaganda) bash-3.2$ python manage.py startapp chatriq 创建成功后需要在 settings.py 文件中加入相应配置： INSTALLED_APPS = [ 'chatriq' ] 项目细节优化 在项目根目录下创建 apps 包目录，用于统一管理后期创建的应用，这需要在 settings.py 文件里新增一条配置： sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) # 将apps目录加到python的搜索目录中去 修改 settings.py 文件里的配置： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = False 在根目录下创建 static 目录用于存放静态文件，创建 templates 文件夹用于存放模板文件，并在 settings.py 文件中添加配置： STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), ) 最终，目录结构如下： (Propaganda) bash-3.2$ ll -rw-r--r-- 1 yves staff 168 Dec 6 20:37 Pipfile -rw-r--r-- 1 yves staff 1639 Dec 6 20:37 Pipfile.lock drwxr-xr-x 8 yves staff 256 Dec 6 21:43 Propaganda/ drwxr-xr-x 4 yves staff 128 Dec 6 21:41 apps/ -rw-r--r-- 1 yves staff 0 Dec 6 21:14 db.sqlite3 -rwxr-xr-x@ 1 yves staff 630 Dec 6 20:56 manage.py drwxr-xr-x 2 yves staff 64 Dec 6 21:26 static/ drwxr-xr-x 2 yves staff 64 Dec 6 21:26 templates/ 数据库配置 在 settings.py 文件中可以配置项目连接的数据库信息，由于本项目暂时不涉及数据库相关操作。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } 生成表迁移数据并在数据库中创建对应表文件： (Propaganda) bash-3.2$ python manage.py makemigrations No changes detected (Propaganda) bash-3.2$ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying sessions.0001_initial... OK 至此，Django项目应用创建完毕，后续更新编码过程中的细节与注意事项。 "},"pipenv.html":{"url":"pipenv.html","title":"Pipenv 包管理工具","keywords":"","body":"Pipenv 包管理工具 pipenv 是什么 pipenv 是 python 官方推荐的包管理工具，集成了 virtualenv、pyenv 和 pip 三者的功能于一身，类似于 php 中的 composer。 我们知道，为了方便管理 python 的虚拟环境和库，通常使用较多的是 virtualenv 、pyenv 和 pip，但是他们不够好用或者说不够偷懒。于是 requests 的作者 Kenneth Reitz 开发了用于创建和管理 python 虚拟环境的工具 —- pipenv。 它能够自动为项目创建和管理虚拟环境，从 Pipfile 文件中添加或者删除包，同时生成 Pipfile.lock 文件来锁定安装包的版本和依赖信息，避免构建错误。 pipenv 主要解决了以下问题： 不用再单独使用 virtualenv、pyenv 和 pip 了，现在它们结合到了一起。 不用再维护 requirement.txt 了，使用 Pipfile 和 Pipfile.lock 来代替。 可以在开发环境使用多个 python 版本。 在安装的 pyenv 条件下，可以自动安装需要的 python 版本。 安全，广泛地使用 Hash 校验，能够自动曝露安全漏洞。 随时查看图形化的依赖关系。 安装 pipenv 使用 pip 安装 $ pip install --user pipenv 这个命令在用户级别（非系统全局）下安装 pipenv。如果安装后 shell 提示找不到 pipenv 命令，你需要添加当前 Python 用户主目录的 bin 目录到 PATH 环境变量。 碰到问题 显示 “Pipenv: Command Not Found” 错误时，按如下操作进行： # 环境变量中添加如下配置 PYTHON_BIN_PATH=\"$(python3 -m site --user-base)/bin\" PATH=\"$PATH:$PYTHON_BIN_PATH\" 使用 brew 安装 Mac 下使用 brew 安装软件应该是最方便的了，推荐使用： brew install pipenv 升级 pipenv： brew upgrade pipenv 常用命令 pipenv 具有的选项： Options: --where Output project home information. --venv Output virtualenv information. --py Output Python interpreter information. --envs Output Environment Variable options. --rm Remove the virtualenv. --bare Minimal output. --completion Output completion (to be eval'd). --man Display manpage. --support Output diagnostic information for use in GitHub issues. --site-packages Enable site-packages for the virtualenv. [env var: PIPENV_SITE_PACKAGES] --python TEXT Specify which version of Python virtualenv should use. --three / --two Use Python 3/2 when creating virtualenv. --clear Clears caches (pipenv, pip, and pip-tools). [env var: PIPENV_CLEAR] -v, --verbose Verbose mode. --pypi-mirror TEXT Specify a PyPI mirror. --version Show the version and exit. -h, --help Show this message and exit. pipenv 可使用的命令参数： Commands: check Checks for security vulnerabilities and against PEP 508 markers provided in Pipfile. clean Uninstalls all packages not specified in Pipfile.lock. graph Displays currently-installed dependency graph information. install Installs provided packages and adds them to Pipfile, or (if no packages are given), installs all packages from Pipfile. lock Generates Pipfile.lock. open View a given module in your editor. run Spawns a command installed into the virtualenv. shell Spawns a shell within the virtualenv. sync Installs all packages specified in Pipfile.lock. uninstall Un-installs a provided package and removes it from Pipfile. update Runs lock, then sync. 一些例子： Usage Examples: Create a new project using Python 3.7, specifically: $ pipenv --python 3.7 Remove project virtualenv (inferred from current directory): $ pipenv --rm Install all dependencies for a project (including dev): $ pipenv install --dev Create a lockfile containing pre-releases: $ pipenv lock --pre Show a graph of your installed dependencies: $ pipenv graph Check your installed dependencies for security vulnerabilities: $ pipenv check Install a local setup.py into your virtual environment/Pipfile: $ pipenv install -e . Use a lower-level pip command: $ pipenv run pip freeze pipenv 使用过程 创建环境，安装指定 python 的版本信息： yvesdeMacBook-Air:Python yves$ mkdir GeneralCrawler yvesdeMacBook-Air:Python yves$ cd GeneralCrawler yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install 如果指定了 --two 或者 --three 选项参数，则会使用 python2 或者 python3 的版本安装，否则将使用默认的 python 版本来安装。当然也可以指定准确的版本信息： yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --two yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --three yvesdeMacBook-Air:GeneralCrawler yves$ pipenv install --python 3.6.4 pipenv 会自动扫描系统寻找合适的版本信息，如果找不到的话，同时又安装了 pyenv 的话，则会自动调用 pyenv 下载对应版本的 python， 否则会报错。 这时候在当前 GeneralCrawler 环境下生成 Pipfile 和 Pipfile.lock 两个环境初始化文件。 进入|退出环境： 进入环境： yvesdeMacBook-Air:GeneralCrawler yves$ pipenv shell 退出环境： (GeneralCrawler) bash-3.2$ exit 安装第三方包： 在安装第三方包之前，我们可以修改镜像源(建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple )来加快下载速度： (GeneralCrawler) bash-3.2$ vim Pipfile url = \"https://pypi.tuna.tsinghua.edu.cn/simple\" 此时我们测试安装 requests 包： (GeneralCrawler) bash-3.2$ pipenv install requests 此时，Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。 Pipfile 是用来替代原来的 requirements.txt 的，内容类似下面这样。source 部分用来设置仓库地址，packages 部分用来指定项目依赖的包，dev-packages 部分用来指定开发环境需要的包，这样分开便于管理。 [[source]] name = \"pypi\" url = \"https://pypi.tuna.tsinghua.edu.cn/simple\" verify_ssl = true [dev-packages] [packages] requests = \"*\" [requires] python_version = \"3.6\" Pipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。 { \"_meta\": { \"hash\": { \"sha256\": \"223fe2288079b4bdf4932ad9f98e6e26b68e9468f2b83dff8dfa78a36cef768b\" }, \"pipfile-spec\": 6, \"requires\": { \"python_version\": \"3.6\" }, \"sources\": [ { \"name\": \"pypi\", \"url\": \"https://pypi.tuna.tsinghua.edu.cn/simple\", \"verify_ssl\": true } ] }, \"default\": { \"certifi\": { \"hashes\": [ \"sha256:017c25db2a153ce562900032d5bc68e9f191e44e9a0f762f373977de9df1fbb3\", \"sha256:25b64c7da4cd7479594d035c08c2d809eb4aab3a26e5a990ea98cc450c320f1f\" ], \"version\": \"==2019.11.28\" }, \"chardet\": { \"hashes\": [ \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\", \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\" ], \"version\": \"==3.0.4\" }, \"idna\": { \"hashes\": [ \"sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407\", \"sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c\" ], \"version\": \"==2.8\" }, \"requests\": { \"hashes\": [ \"sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4\", \"sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31\" ], \"index\": \"pypi\", \"version\": \"==2.22.0\" }, \"urllib3\": { \"hashes\": [ \"sha256:a8a318824cc77d1fd4b2bec2ded92646630d7fe8619497b142c84a9e6f5a7293\", \"sha256:f3c5fd51747d450d4dcf6f923c81f78f811aab8205fda64b0aba34a4e48b0745\" ], \"version\": \"==1.25.7\" } }, \"develop\": {} } 现在安装另一个包，再次查看这两个文件的内容。你会发现 Pipfile 现在包含两个安装包了，Pipfile.lock 也包含了所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。每次你安装新的依赖包，这两个文件都会自动更新。 安装指定版本包： (GeneralCrawler) bash-3.2$ pipenv install requests==2.22.0 安装开发环境下的包： 加 --dev 表示包括 Pipfile 的 dev-packages 中的依赖。 (GeneralCrawler) bash-3.2$ pipenv install requests==2.22.0 --dev 卸载第三方包： (GeneralCrawler) bash-3.2$ pipenv uninstall requests 更新安装包： (GeneralCrawler) bash-3.2$ pipenv update requests (GeneralCrawler) bash-3.2$ pipenv update // 更新所有包，会删除所有软件包然后重新安装最新的版本 查看虚拟环境目录： (GeneralCrawler) bash-3.2$ pipenv --venv /Users/yves/.local/share/virtualenvs/GeneralCrawler-flvgS1J0 查看项目根目录： (GeneralCrawler) bash-3.2$ pipenv --where /Users/yves/Documents/GitHub/Python/GeneralCrawler 检查软件包的完整性 pipenv 可以帮你检查已安装的软件包有没有安全漏洞，运行下面的命令： (GeneralCrawler) bash-3.2$ pipenv check Checking PEP 508 requirements… Passed! Checking installed package safety… All good! 查看依赖树 (GeneralCrawler) bash-3.2$ pipenv graph requests==2.22.0 - certifi [required: >=2017.4.17, installed: 2019.11.28] - chardet [required: >=3.0.2,=2.5,=1.21.1,锁定版本 (GeneralCrawler) bash-3.2$ pipenv lock // 更新 lock 文件锁定当前环境的依赖版本 Locking [dev-packages] dependencies… Locking [packages] dependencies… ✔ Success! Updated Pipfile.lock (ef768b)! 环境变量管理 如果你开发调试时需要配一堆环境变量，可以写到 .env 文件中，在 pipenv shell 进入虚拟环境时，它会帮你把这些环境变量加载好，非常方便。 例如写一个 .env 文件： echo \"FOO=hello foo\" > .env 之后 pipenv shell 进入虚拟环境，echo $FOO 就能看环境变量的值 hello foo 已经设置好了。 "},"crawler_web.html":{"url":"crawler_web.html","title":"如何扒取整站内容","keywords":"","body":"如何扒取整站内容 刚看到一个很棒的资料站，想把里面的内容下载下来，嫌弃复制粘贴的方式太麻烦，于是写了个爬虫脚本去抓取，由于网站设置了反爬策略，不成功。 苦思冥想，wget 命令解决。 wget 可以以递归的方式下载整站，并可以将下载的页面中的链接转换为本地链接，加上相关参数后就可以变成功能强大的下载工具。 wget -r -p -np -k 网址 -r, –recursive（递归） specify recursive download.（指定递归下载） -k, –convert-links（转换链接） make links in downloaded HTML point to local files.（将下载的HTML页面中的链接转换为相对链接即本地链接） -p, –page-requisites（页面必需元素） get all images, etc. needed to display HTML page.（下载所有的图片等页面显示所需的内容） -np, –no-parent（不追溯至父级） don’t ascend to the parent directory. 另外断点续传用-nc参数 日志 用-o参数 随便选一个网站进行试验： [root@iZbp131uq20xx1y0zvhsskZ ~]# wget -r -p -np -k https://www.baidu.com --2020-01-13 17:47:12-- https://www.baidu.com/ Resolving www.baidu.com (www.baidu.com)... 180.101.49.11, 180.101.49.12 Connecting to www.baidu.com (www.baidu.com)|180.101.49.11|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 2443 (2.4K) [text/html] Saving to: ‘www.baidu.com/index.html’ 100%[=======================================================================================>] 2,443 --.-K/s in 0s 2020-01-13 17:47:12 (787 MB/s) - ‘www.baidu.com/index.html’ saved [2443/2443] Loading robots.txt; please ignore errors. --2020-01-13 17:47:12-- https://www.baidu.com/robots.txt Reusing existing connection to www.baidu.com:443. HTTP request sent, awaiting response... 200 OK Length: 2814 (2.7K) [text/plain] Saving to: ‘www.baidu.com/robots.txt’ 100%[=======================================================================================>] 2,814 --.-K/s in 0s 2020-01-13 17:47:12 (40.1 MB/s) - ‘www.baidu.com/robots.txt’ saved [2814/2814] Loading robots.txt; please ignore errors. --2020-01-13 17:47:12-- http://www.baidu.com/robots.txt Connecting to www.baidu.com (www.baidu.com)|180.101.49.11|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 2814 (2.7K) [text/plain] Saving to: ‘www.baidu.com/robots.txt’ 100%[=======================================================================================>] 2,814 --.-K/s in 0s 2020-01-13 17:47:12 (619 MB/s) - ‘www.baidu.com/robots.txt’ saved [2814/2814] FINISHED --2020-01-13 17:47:12-- Total wall clock time: 0.1s Downloaded: 3 files, 7.9K in 0s (104 MB/s) Converting www.baidu.com/index.html... 0-4 Converted 1 files in 0 seconds. 执行完成后，目录下会出现一个新文件夹，里面包含下载内容： [root@iZbp131uq20xx1y0zvhsskZ ~]# ll total 4 drwxr-xr-x 2 root root 4096 Jan 13 17:47 www.baidu.com 将文件打包下载即可： tar -cvf log.tar 1.log # 仅打包不压缩 tar -zcvf log.tar.gz 1.log # 打包后以 gzip 压缩 tar -jcvf log.tar.bz2 1.log # 打包后，以 bzip2 压缩 "},"google_hacking.html":{"url":"google_hacking.html","title":"通过 Google Hacking 语法进行信息采集","keywords":"","body":"通过 Google Hacking 语法进行信息采集 语法简介 site: 搜索范围限制在某网站或顶级域名中，这个也很有用，例如: site:www.4ngel.net 将返回所有和 4ngel.net 这个站有关的URL。 filetype: 搜索特定类型文档，例如: filetype:doc 将返回所有以 doc 结尾的文件 URL，当然如果你找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富。 inurl: 搜索指定的字符是否存在于URL中，例如: inurl:admin 将返回N个类似于这样的连接:http://www.xxx.com/xxx/admin 用来找管理员登陆的URL，allinurl 也同 inurl 类似，可指定多个字符。 intext: 正文中搜索某个字符做为搜索条件，如在google里输入 intext:动网 将返回所有在网页正文部分包含”动网”的网页，allintext:使用方法和intext类似。 intitle: 标题中搜索是否有我们所要找的字符,例如搜索 intitle:安全天使 将返回所有网页标题中包含”安全天使”的网页,同理allintitle:也同intitle类似. cache: 搜索谷歌缓存页面（类似百度快照）搜索google里关于某些内容的缓存,有时候也许能找到一些好东西。 define: 查询单词或者术语的定义，搜索某个词语的定义，搜索 define:hacker 将返回关于hacker的定义。 info: 查找指定站点的一些基本信息。 link: 搜索所有链接到某个URL地址的网页，例如搜索 link:www.4ngel.net 可以返回所有和 www.4ngel.net 做了链接的URL。 inanchor: 锚链链接搜索在做网站中有时候用锚点来链接一个页面中的其它部分内容，这样方便浏览和定位。也就是说锚点链接的内容通常是网页内容中重要的章节或内容的开始部分，因而对它们的搜索也更能反映网页的主题内容，提高搜索结果的准确度。对于熟悉网页制作的人来说，可以从网页源代码中查看有锚点的HTML代码。 related: 相关网址查找与某个页面结构内容相似的页面，“related”用来搜索结构内容方面相似的网页。related语法对于发现某一类信息非常有用，比如当你用related搜索一个图书馆网址的时候会出来大量图书馆的网站，如【related:lib.nit.net.cn】；当搜索某期刊网址的时候，能搜索出大量给学科领域的相关期刊，如【related:www.lis.ac.cn】。 初阶搜索 1、默认模糊搜索、自动拆分短语 搜索引擎基本一样的语法，直接在搜索框中输入搜索词时，谷歌默认进行模糊搜索，并能对长短语或语句进行自动拆分成小的词进行搜索。 2、短语精确搜索。 — “” 给关键词加上半角引号实现精确搜索，不进行分词。 3、通配符。 — “※” 谷歌的通配符是星号“*”，必须在精确搜索符双引号内部使用。用通配符代替关键词或短语中无法确定的字词。 4、点号匹配任意字符。 — . 与通配符星号“*”不一样的是，点号“.”匹配的是字符，不是字、短语等内容。保留的字符有[、(、-等。 5、布尔逻辑：与或非：and，|,or,-” 布尔逻辑是许多检索系统的基本检索技术，在搜索引擎中也一样适用，在谷歌网页搜索中需要注意的是：谷歌和许多搜索引擎一样，多个词间的逻辑关系默认的是逻辑与（空格）。当用逻辑算符的时候，词与逻辑算符之间用需要空格分隔，包括后面讲的各种语法，均要有空格。逻辑非是特例，即减号必须与对应的词连在一起。对于复杂的逻辑关系，可用括号分组。 6、基本搜索符号约束 加号“+”用于强制搜索，即必须包含加号后的内容。一般与精确搜索符一起应用。关键词前加“-”减号,要求搜索结果中包含关键词,但不包含减号后的关键词，用关于搜索结果的筛选。 7、数字范围: .. 用两个点号“..”表示一个数字范围。一般应用于日期、货币、尺寸、重量、高度等范围的搜索。用作范围时最好给一定的含义。 8、括号分组: () 逻辑组配时分组，避免逻辑混乱。括号“()”是分组符号。 高阶用法 1、查找可以未经授权就可以访问的phpMyAdmin的后台页面 inurl:.php? intext:CHARACTER_SETS,COLLATIONS, ?intitle:phpmyadmin 2、搜索可能存在openssl心脏出血漏洞的站点 \"OPENSSL\" AND \"1.0.1 SERVER AT\" OR \"1.0.1A SERVER AT\" OR \"1.0.1B SERVER AT\" OR \"1.0.1C SERVER AT\" OR \"1.0.1D SERVER AT\" OR \"1.0.1E SERVER AT\" OR \"1.0.1F SERVER AT\" 查找注射点 site:xx.com filetype:asp site:tw inurl:asp?id= 这个是找台湾的 site:jp inurl:asp?id= 这个是找日本的 site:ko inurl:asp?id= 这个是找韩国的 intitle:旁注- 网站xxxfiletype:asp inurl:editor/db/ inurl:eWebEditor/db/ inurl:bbs/data/ inurl:databackup/ inurl:blog/data/ inurl:okedata inurl:bbs/database/ inurl:conn.asp inurl:inc/conn.asp 上传漏洞 /eWebEditor/upload.asp #eWebEditor上传页面 /editor/upload.asp #eWebEditor上传页面 /bbs/upfile.asp #动网论坛上传页面 /forum/upfile.asp #动网论坛上传页面 /dvbbs/upfile.asp #动网论坛上传页面 /upfile_soft.asp #动力管理系统上传页面 /upload.asp?action=upfile #乔客6.0上传页面 /upfile.asp #动网论坛上传页面 /bbs/down_addsoft.asp #动网论坛插件上传页面 /bbs/down_picupfile.asp #动网论坛插件上传页面 /down_picupload.asp #动网论坛插件上传页面 /admin/admin_upfile.asp #管理员后台上传页面 /admin/upfile.asp #管理员后台上传页面 /admin/upload.asp #管理员后台上传页面 /admin/uploadfaceok.asp #尘缘上传页面 /news/admin/upfile.asp #新闻管理上传页面 /admin_upfile.asp #飞龙文章管理系统 v2.0 /user_upfile.asp #飞龙文章管理系统 v2.0 /upload_flash.asp #秋叶购物商城上传页面 /Saveannounce_upload.asp #购物中心上传页面 /UploadFace.asp #沸腾展望新闻系统 v1.1 /bbs/diy.asp #Domian3.0默认木马 /UploadSoft/diy.asp #Domian3.0默认木马 /diy.asp #Domian3.0默认木马 /upload/upload.asp #某某文章管理系统 /mybbs/saveup.asp #MYBBS论坛上传页面 /dxxobbs/upload.asp #DxxoBBS论坛上传页面 /img_upfile.asp #任我飞扬驿站上传页面 /Upfile_SoftPic.asp #动力管理系统上传页面 /upfile_flash.asp #秋叶购物商城上传页面 数据库 database/PowerEasy4.mdb #动易网站管理系统4.03数据库 database/PowerEasy5.mdb database/PowerEasy6.mdb database/PowerEasy2005.mdb database/PowerEasy2006.mdb database/PE_Region.mdb data/dvbbs7.mdb #动网论坛数据库 databackup/dvbbs7.mdb #动网论坛备份数据库 bbs/databackup/dvbbs7.mdb #动网论坛备份数据库 data/zm_marry.asp #动网sp2美化版数据库 databackup/dvbbs7.mdb admin/data/qcdn_news.mdb #青创文章管理系统数据库 firend.mdb #交友中心数据库 database/newcloud6.mdb #新云管理系统6.0数据库 database/%23newasp.mdb #新云网站系统 blogdata/L-BLOG.mdb #L-BLOG v1.08数据库 blog/blogdata/L-BLOG.mdb #L-BLOG v1.08数据库 database/bbsxp.mdb #BBSXP论坛数据库 bbs/database/bbsxp.mdb #BBSXP论坛数据库 access/sf2.mdb #雪人论坛程序v2.0数据库 data/Leadbbs.mdb #LeadBBS论坛 v3.14数据库 bbs/Data/LeadBBS.mdb #LeadBBS论坛 v3.14数据库 bbs/access/sf2.mdb #雪人论坛程序v2.0数据库 fdnews.asp #六合专用BBS数据库 bbs/fdnews.asp #六合专用BBS数据库 admin/ydxzdate.asa #雨点下载系统 v2.0+sp1数据库 data/down.mdb #动感下载系统xp ver2.0数据库 data/db1.mdb #动感下载系统xp v1.3数据库 database/Database.mdb #轩溪下载系统 v3.1数据库 db/xzjddown.mdb #lhdownxp下载系统数据库 db/play.asp #娱乐先锋论坛 v3.0数据库 mdb.asp #惊云下载系统 v1.2数据库 admin/data/user.asp #惊云下载系统 v3.0数据库 data_jk/joekoe_data.asp #乔客6.0数据库 data/news3000.asp #沸腾展望新闻系统 v1.1数据库 data/appoen.mdb #惠信新闻系统4.0数据库 data/12912.asp #飞龙文章管理系统 v2.1数据库 database.asp #动感极品下载管理系统 v3.5 download.mdb #华仔软件下载管理系统 v2.3 dxxobbs/mdb/dxxobbs.mdb #dxxobbs论坛数据库 db/6k.asp #6kbbs 用户名:admin 密码:6kadmin database/snowboy.mdb #雪孩论坛 默认后台admin/admin_index.asp database/%23mmdata.mdb #依爽社区 editor/db/ewebeditor.mdbeWebEditor/db/ewebeditor.mdb 管理入口 admin admin_index admin_admin index_admin admin/index admin/default admin/manage admin/login manage_index index_manage superadmin 说明.txt manager/login manager/login.asp manager/admin.asp login/admin/admin.asp houtai/admin.asp guanli/admin.asp denglu/admin.asp admin_login/admin.asp admin_login/login.asp admin/manage/admin.asp admin/manage/login.asp admin/default/admin.asp admin/default/login.asp member/admin.asp member/login.asp administrator/admin.asp administrator/login.asp phpmyadmin include/config.inc.php include/config.php lib/config.php "},"google_email.html":{"url":"google_email.html","title":"怎么申请谷歌邮箱","keywords":"","body":"怎么申请谷歌邮箱 为什么要申请 谷歌邮箱是世界上最好用的邮箱，没有之一。由于在全球市场上的霸主地位，因而许多网站都可以使用谷歌邮箱进行第三方登录。 怎么申请 网页上按照正常操作申请谷歌邮箱大概率不能成功（被黑产玩坏了），因而需要借助移动端进行申请注册，具体步骤请参考视频。 "},"vps.html":{"url":"vps.html","title":"如何科学上网","keywords":"","body":"如何科学上网 免费资源 OR 收费资源 网上有很多免费的科学上网工具，但一般带宽设限使用时相当慢，其次则是客户端广告较多影响体验。因此比较推荐购买 VPS 主机资源进行服务器搭建。 国内市占率较高的主要有两家，分别是 搬瓦工 与 Vultr ，两者之间的主要区别在于：前者是按年或月收费，后者则按照使用时长收费。 购买链接： 搬瓦工购买链接 Vultr购买链接 服务器远程连接工具 请下载《电脑装机软件合集》里的 SecureCRT远程连接软件，安装后使用。 安装搭建脚本 使用Secure CRT工具连接成功后，粘贴下面的命令进行操作： [root@vultr ~]# yum install -y wget && wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh && bash shadowsocks-libev.sh 回车后系统会自行下载脚本文件并运行，按照下图提示，我们输入1选择安装服务，回车继续： 2020-01-12 15:44:00 (51.7 MB/s) - ‘shadowsocks-libev.sh’ saved [21414/21414] ============================================== Shadowsocks Server Management Script (libev) ============================================== 1. Shadowsocks Server Install 2. Shadowsocks Server Uninstall 3. Shadowsocks Server Update ---------------------------------------------- 4. Shadowsocks Server Start 5. Shadowsocks Server Stop 6. Shadowsocks Server Restart ---------------------------------------------- 7. Shadowsocks Config Status 8. Shadowsocks Config Modify ============================================== Not installed Please Enter the Number:1 回车后系统会进入安装界面，我们首先依次输入 SS 的各项信息，然后回车继续即可： [Info] Start set shadowsocks's config information... [Info] Wherever you are not sure, just press Enter to continue. Please enter shadowsocks's password [Default is 123456]: ------------------------------- Shadowsocks's Password: 123456 ------------------------------- Please enter shadowsocks's port (1~65535) [Default is 33526]: ------------------------------- Shadowsocks's Port: 33526 ------------------------------- Please select shadowsocks's stream cipher 1) aes-256-gcm 2) aes-256-ctr 3) aes-256-cfb 4) chacha20-ietf-poly1305 5) chacha20-ietf 6) chacha20 7) rc4-md5 [Default is aes-256-gcm]:3 ------------------------------- Shadowsocks's Streamcipher: aes-256-cfb ------------------------------- Press Enter to continue...or Press Ctrl+C to cancel 安装过程耗时 2~5 分钟，完成后会来到下图界面： [Info] Congratulations, Shadowsocks has been installed successfully. ================================================= Server IP : 1.1.1.1 Server Port : 33526 Password : 123456 Encryption Method: aes-256-cfb ------------------------------------------------- ss://YWVzLTI1Ni1jZmI6TnVtYmVyMTQzMzIyM0AxNDkuMjguMTMyLjEzMzo5NTI2 ================================================= You can find the config's backup in /root/shadowsocks.txt. For more tutorials: https://www.banwagongzw.com & https://www.vultrcn.com 接下来需要安装锐速TCP加速软件，由于系统自带内核版本太高无法安装锐速，需要进行降级，复制命令进行操作： [root@vultr ~]# wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh 回车后系统会自动下载脚本并执行更换内核命令，按图提示，我们可以看到当前系统为CentOS7，等待内核更换完毕后系统会自动重启并断开连接： [INFO] System OS is CentOS7. Processing... ------------------------------------------- Retrieving https://filedown.me/Linux/Kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm Preparing... ################################# [100%] Updating / installing... 1:kernel-3.10.0-229.1.2.el7 ################################# [100%] ------------------------------------------- [INFO] Success! Your server will reboot in 3s... [INFO] Success! Your server will reboot in 2s... [INFO] Success! Your server will reboot in 1s... [INFO] Reboot... 系统重启后，软件会断开连接，等待3分钟左右服务器即可重启完毕，我们重新连接服务器，按图提示，我们继续复制命令： [root@vultr ~]# yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install 回车后系统会自动下载脚本并执行，按图提示，我们直接回车继续即可： Local Time : 2020-01-12 [16:00:09] ====================================================== | serverSpeeder | | for Linux | |----------------------------------------------------| | -- By .Vicer | ====================================================== Preparatory work... Press Enter to Continue... Preparatory work... Press Enter to Continue... Archive: /tmp/appex.zip inflating: /tmp/appex/install.sh creating: /tmp/appex/apxfiles/ creating: /tmp/appex/apxfiles/bin/ inflating: /tmp/appex/apxfiles/bin/renewLic.sh inflating: /tmp/appex/apxfiles/bin/serverSpeeder.sh inflating: /tmp/appex/apxfiles/bin/setConfig.sh inflating: /tmp/appex/apxfiles/bin/showConfig.sh inflating: /tmp/appex/apxfiles/bin/update.sh inflating: /tmp/appex/apxfiles/bin/utils.sh creating: /tmp/appex/apxfiles/etc/ inflating: /tmp/appex/apxfiles/etc/config Lic generate success! Installation done! 回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息，按图提示，我们每次都直接回车继续即可： ---- You are about to be asked to enter information that will be used by ServerSpeeder, there are several fields and you can leave them blank, for all fields there will be a default value. ---- Accelerate VPN (PPTP,L2TP,etc.)? [n]: Auto load ServerSpeeder on linux start-up? [y]: /etc/centos-release:CentOS Linux release 7.7.1908 (Core) /etc/os-release:NAME=\"CentOS Linux\" /etc/os-release:PRETTY_NAME=\"CentOS Linux 7 (Core)\" /etc/os-release:CENTOS_MANTISBT_PROJECT=\"CentOS-7\" /etc/redhat-release:CentOS Linux release 7.7.1908 (Core) /etc/system-release:CentOS Linux release 7.7.1908 (Core) Run ServerSpeeder now? [y]: 设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态，按图提示，当出现红框内信息时说明锐速已完成安装并开机自启动： (license 628A71EDC5706E97151885d3) [Running Status] ServerSpeeder is running! version 3.11.20.10 [License Information] License 628A71EDC5706E97 (valid on current device) MaxSession unlimited MaxTcpAccSession unlimited MaxBandwidth(kbps) 1024000 ExpireDate 2035-12-31 在使用的过程中如果需要修改相关的配置信息，请使用下面的命令： 附一、修改Shadowsocks的配置信息 如果你以后需要修改Shadowsocks的配置（比如密码、端口或者加密），可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 8 项：修改Shadowsocks配置即可重新设置Shadowsocks的密码、端口以及加密方式。 附二、卸载Shadowsocks服务 如果你以后需要卸载Shadowsocks服务，可以运行下列命令： 中文版：bash shadowsocks-libev_CN.sh 英文版：bash shadowsocks-libev.sh 然后选择第 2 项：卸载Shadowsocks服务即可从服务器中卸载掉Shadowsocks服务。 小飞机下载 安装完成后，需要在我们需要科学上网的设备上安装相应软件来连接，下载请参考《电脑装机软件合集》里的 Shadowsocks小飞机，安装后使用。 "}}